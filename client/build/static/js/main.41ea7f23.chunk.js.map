{"version":3,"sources":["utils/sessions.js","actions.js","constants.js","Components/LoginModal.js","Components/InstructorSignupModal.js","Components/WelcomeToastWidget.js","Components/Homepage.js","pages/Home.js","Components/AppNavbar.js","pages/PortalLanding.js","Components/AddStudentModal.js","Components/UpdateStudentModal.js","Components/StudentRosterTable.js","pages/InsStudentRoster.js","Components/StudentCard.js","pages/InsCourseRoster.js","Components/CourseCard.js","Components/AddCourseModal.js","pages/InsCoursePage.js","pages/ResetPassword.js","pages/AdminLandingPage.js","Components/AdminInstructorTable.js","pages/AdminInstructorView.js","Components/AdminStudentTable.js","pages/AdminStudentView.js","Components/StuCourseCard.js","pages/StuCoursePage.js","Components/Player.js","Components/LessonCard.js","pages/StuLessonPage.js","Components/ProtectedRoute.js","Components/Unauthorized.js","Components/AddLessonModal.js","pages/InsLessonPage.js","App.js","serviceWorker.js","reducer.js","store.js","index.js","img/403.png"],"names":["config","require","validateSession","localStorage","getItem","__session","JSON","parse","Date","now","ts","REACT_APP_SESSION_LENGTH","loginAttempt","creds","dispatch","type","isFetchingAuth","isAuthenticatedUser","axios","post","then","response","status","authObj","removeItem","setItem","stringify","createSession","data","payload","catch","error","loginFailed","message","getCourseSuccess","courses","getCourseFailure","getLessonsSuccess","lessons","getLessonsFailure","setCourseId","id","setCourseIdSuccess","getAllInstructors","token","console","log","get","headers","getAllInstructorsFailure","getAllStudents","getAllStudentsFailure","logoutAttempt","activateUserSuccess","activateUserFailure","deactivateUserSuccess","deactivateUserFailure","LoginModal","props","useDispatch","useState","validated","setValidated","email","password","loginCreds","setLoginCreds","isForgetPassword","setForgetPassword","emailrec","setPassEmailRec","useSelector","gState","handleInputChange","e","currState","target","name","value","handleInputChangeReset","handleSubmit","preventDefault","stopPropagation","currentTarget","checkValidity","handleSubmitReset","toggleForgetPassword","Modal","className","size","aria-labelledby","centered","Header","closeButton","Title","Body","Form","noValidate","onSubmit","Group","Label","htmlFor","Control","placeholder","onChange","required","Text","Feedback","Button","onClick","variant","Alert","loginEmail","aria-describedby","loginPassword","InstructorSignupModal","controlId","muted","onHide","WelcomeToastWidget","isLoggedOutSuccess","aria-live","aria-atomic","style","position","minHeight","minWidth","top","right","Toast","backgroundColor","as","fname","Homepage","loginModalShow","setLoginModalShow","signupModalShow","setSignupModalShow","history","useHistory","useEffect","redirectRouter","routePath","push","performUserLogout","Jumbotron","tag","renderLoginLogoutBtn","role","toUpperCase","renderInstSignupOrDash","show","Home","AppNavbar","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","NavDropdown","title","Item","InsLanding","Fragment","AddStudentModal","first_name","last_name","crsid","studentData","setStudentData","accessToken","isAddingNewUser","addStudentFailed","UpdateStudentModal","isUpdatingUser","updateStudentFailed","StudentRosterTable","stuRoster","updateStudentModal","setUpdateStudentModal","Table","map","student","Users","user","key","course_name","InsStudentRoster","showStudentModal","setShowStudentModal","isNewUserAdded","roster","getRosterFailure","StudentCard","Card","width","Image","src","roundedCircle","firstName","lastName","InsCourseRoster","courseName","CourseCard","CardGroup","course","Img","subject","path","course_Id","viewLessons","AddCourseModal","user_id","courseData","setCourseData","isAddingNewCourse","addCourseFailed","InsCoursePage","showCourseModal","setShowCourseModal","parseToken","queryToken","undefined","_token","ResetPassword","isValidPassResTok","isValidatingPassResTok","isResetingPassword","isPasswordResetSuccess","resPassUid","appMsg","validationError","setValidationError","confirm","newPass","setNewPass","tempToken","location","search","userId","resetPassTokenFailed","length","getState","passwordResetSuccess","msg","passwordResetFailure","Container","Row","Col","setTimeout","disabled","AdminLandingPage","AdminInstructorTable","allInstructors","instructor","active","handleActivate","handleDeactivate","handleDelete","AdminInstructorList","delete","deleteInstructorSuccess","err","deleteInstructor","put","activateInstructor","deactivateInstructor","AdminStudentTable","allStudents","AdminStudentList","deleteStudentSuccess","deleteStudent","activateStudent","deactivateStudent","StuCourseCard","Users_Courses","courseId","StuCoursePage","stuResponse","Courses","Player","url","controls","LessonCard","urlGetter","getAttribute","getUrlSuccess","getUrl","videoRouter","lesson","StuLessonPage","ProtectedRoute","Component","component","auth","rest","render","Object","keys","to","pathname","state","from","Unauthorized","logo403","alt","AddLessonModal","description","CourseId","lessonData","setLessonData","rows","isAddingNewLesson","addLessonFailed","InsLessonPage","showLessonModal","setShowLessonModal","App","isSessionValid","exact","PortalLanding","InsCourses","AdminInstructorView","AdminStudentView","Boolean","window","hostname","match","initialState","isLoggingOut","isNewCourseAdded","courseObj","isNewLessonAdded","lessonObj","lessonId","stuObj","isUserUpdated","store","createStore","action","compose","applyMiddleware","thunk","composeWithDevTools","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.41ea7f23.chunk.js","sourcesContent":["//helper functions for local storage operations\n//with login sessions.\n//---------------------------------------------\n//importing config file\nconst config = require(\"../config/config-react.json\");\n\n//creating session after successful login\nexport const createSession = (authObj) => {\n    //check if __session exist\n    //const __session = localStorage.getItem(\"__session\") || \"\";\n    if(localStorage.getItem(\"__session\")) {localStorage.removeItem(\"__session\")};\n    //create timestamp for session info\n    const ts = ~~(Date.now() / 1000);\n    //add timestamp into authObject\n    authObj[\"ts\"] = authObj[\"ts\"] || ts;\n    //send authObj to localStorage\n    localStorage.setItem(\"__session\", JSON.stringify(authObj));\n}\n\n//destroy __session from localStorage on logout\nexport const destroySession = () => {\n    //remove __session from localStorage\n    localStorage.removeItem(\"__session\");\n    console.log(\"__session eliminated\");\n}\n\n//validating session if exist\nexport const validateSession = () => {\n    //check if __session exist\n    //if exists, validate timestamp.\n    if(localStorage.getItem(\"__session\")){\n        const __session = JSON.parse(localStorage.getItem(\"__session\"));\n        //calculate difference in Hrs\n        const tsDiffHrs = ((~~(Date.now() / 1000)) - __session.ts) / 3600;\n        if(tsDiffHrs >= config.REACT_APP_SESSION_LENGTH) return false;\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\n//returning session object if session is valid\nexport const getSessionAuthObj = () => {\n    if (validateSession()){\n        //return session\n        return JSON.parse(localStorage.getItem(\"__session\"));\n    }\n    return {}\n}","//importing constants\nimport { \n  LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE, \n  LOGOUT_REQUEST, LOGOUT_SUCCESS,LOGOUT_FAILURE,\n  ADD_STUDENT_REQUEST, ADD_STUDENT_SUCCESS, ADD_STUDENT_FAILURE,\n  ADD_COURSE_REQUEST, ADD_COURSE_SUCCESS, ADD_COURSE_FAILURE,\n  GET_COURSES_REQUEST, GET_COURSES_SUCCESS, GET_COURSES_FAILURE,\n  ADD_LESSON_REQUEST, ADD_LESSON_SUCCESS, ADD_LESSON_FAILURE,\n  GET_LESSONS_REQUEST, GET_LESSONS_SUCCESS, GET_LESSONS_FAILURE,\n  SET_COURSE_ID_SUCCESS , SET_COURSE_ID_FAILURE,\n  GET_ALL_INSTRUCTORS_REQUEST, GET_ALL_INSTRUCTORS_SUCCESS, GET_ALL_INSTRUCTORS_FAILURE,\n  GET_ALL_STUDENTS_REQUEST, GET_ALL_STUDENTS_SUCCESS, GET_ALL_STUDENTS_FAILURE,\n  GET_ROSTER_REQUEST, GET_ROSTER_SUCCESS, GET_ROSTER_FAILURE,\n  PASSRESTOK_VALIDATION_REQUEST, PASSRESTOK_VALIDATION_SUCCESS, PASSRESTOK_VALIDATION_FAILURE,\n  GET_URL_REQUEST, GET_URL_SUCCESS, GET_URL_FAILURE,\n  UPDATE_STUDENT_REQUEST, UPDATE_STUDENT_SUCCESS, UPDATE_STUDENT_FAILURE,\n  PASSWORD_RESET_REQUEST, PASSWORD_RESET_SUCCESS, PASSWORD_RESET_FAILURE,\n  DELETE_INSTRUCTOR_SUCCESS, DELETE_INSTRUCTOR_FAILURE,\n  DELETE_STUDENT_SUCCESS, DELETE_STUDENT_FAILURE,\n  // INSTRUCTOR_ACTIVATION_REQUEST,INSTRUCTOR_ACTIVATION_SUCCESS,INSTRUCTOR_ACTIVATION_FAILURE,\n  // INSTRUCTOR_DEACTIVATION_REQUEST,INSTRUCTOR_DEACTIVATION_SUCCESS,INSTRUCTOR_DEACTIVATION_FAILURE,\n  // STUDENT_ACTIVATION_REQUEST,STUDENT_ACTIVATION_SUCCESS,STUDENT_ACTIVATION_FAILURE,\n  // STUDENT_DEACTIVATION_REQUEST,STUDENT_DEACTIVATION_SUCCESS,STUDENT_DEACTIVATION_FAILURE,\n  USER_ACTIVATION_SUCCESS, USER_ACTIVATION_FAILURE,\n  USER_DEACTIVATION_SUCCESS, USER_DEACTIVATION_FAILURE\n} from \"./constants\";\nimport { createSession, destroySession, validateSession } from \"./utils/sessions\";\nimport axios from \"axios\";\n\n//action: LOGIN_SUCCESS once backend call is successfull\nconst loginSuccess = (authObj) => ({\n  type:    LOGIN_SUCCESS,\n  isFetchingAuth: false,\n  isAuthenticatedUser: true,\n  payload: authObj,\n});\n\n//action: LOGIN_FAILURE if backend call is unsuccessful\nconst loginFailed = (error) => ({\n  type:    LOGIN_FAILURE,\n  isFetchingAuth: false,\n  isAuthenticatedUser: false,\n  payload: error,\n});\n\n//action: LOGIN_REQUEST  to backend REST api\nexport const loginAttempt = (creds) => {\n  //function receives credentials\n  return (dispatch) => {\n    //dispatch action to notify client\n    //of login request in progress\n    dispatch({\n        type: LOGIN_REQUEST,\n        isFetchingAuth: true,\n        isAuthenticatedUser: false\n      });\n    //use axios to query REST api for login.\n    axios\n      .post(\"/api/auth/signin\", creds)\n      .then( (response) => {\n        //if request is successful, persist a session and dispatch\n        //login success action\n        if(response.status === 200){\n          createSession(response.data);\n          dispatch(loginSuccess(response.data));\n        }\n      })\n      .catch( (error) => {\n        dispatch(loginFailed(error.message));\n      });\n  }\n}\n\n///Action to load courses\nconst getCourseSuccess = (courses) => ({\n  type: GET_COURSES_SUCCESS,\n  payload: courses\n})\n//When Request from API fails\nconst getCourseFailure = (error) => ({\n  type: GET_COURSES_FAILURE,\n  payload: error,\n})\n\n\n//courses Api request for instructor\nexport const getCourses = (token) => {\n \n  return (dispatch) => {\n    dispatch({type: GET_COURSES_REQUEST});\n    axios\n      .get(\"/api/user/instructor/courses\", {\n        headers: {\n          'x-access-token': token\n        }\n      })\n      .then((response) => {\n        dispatch(getCourseSuccess(response.data))\n     \n      })\n      .catch((error) => {\n        dispatch(getCourseFailure(error.message))\n      })\n  }\n}\n\n\n//Get Courses Student API request\nexport const getStuCourses = (token) => {\n  return (dispatch) => {\n    dispatch({type: GET_COURSES_REQUEST});\n    axios\n      .get(\"/api/user/student/courses\", {\n        headers: {\n          'x-access-token': token\n        }\n      })\n      .then((response) => {\n        // console.log(response)\n        let stuResponse = response.data.data.Courses\n        dispatch(getCourseSuccess(stuResponse))\n        // console.log(response)\n\n      })\n      .catch((error) => {\n        dispatch(getCourseFailure(error.message))\n      })\n  }\n}\n\n\n//Actions to get lessons for the instructors page\n///Action to load courses\nconst getLessonsSuccess = (lessons) => ({\n  type: GET_LESSONS_SUCCESS,\n  payload: lessons\n})\n//When Request from API fails\nconst getLessonsFailure = (error) => ({\n  type: GET_LESSONS_FAILURE,\n  payload: error,\n})\n\n\n//courses Api request for instructor\nexport const getLessons = (token, id) => {\n  return (dispatch) => {\n    dispatch({type: GET_LESSONS_REQUEST});\n    axios\n      .get(\"/api/user/instructor/lessons/\" + id , {\n        headers: {\n          'x-access-token': token\n        }\n      })\n      .then((response) => {\n        \n        dispatch(getLessonsSuccess(response.data))\n        \n      })\n      .catch((error) => {\n        dispatch(getLessonsFailure(error.message))\n      })\n  }\n}\n\n//Get Lessons for students pages\nexport const getStuLessons = (token, id) => {\n  return (dispatch) => {\n    dispatch({type: GET_LESSONS_REQUEST});\n    axios\n      .get(\"/api/user/student/courses/\" + id +\"/lessons\", {\n        headers: {\n          'x-access-token': token\n        }\n      })\n      .then((response) => {\n        // console.log(response)\n        dispatch(getLessonsSuccess(response.data))\n        \n      })\n      .catch((error) => {\n        dispatch(getLessonsFailure(error.message))\n      })\n  }\n}\n\n\nconst setCourseIdSuccess = (id) => {\n \nreturn {\n  type: SET_COURSE_ID_SUCCESS,\n  payload: id\n}\n}\n\n//When Request from API fails\nconst setCourseIdFailure = (error) => ({\n  type: SET_COURSE_ID_FAILURE,\n  payload: error,\n})\n\nexport const setCourseId = (id) => {\n  return (dispatch) => {\n    if(id){\n      dispatch(setCourseIdSuccess(id))\n\n    } else {\n      dispatch(setCourseIdFailure())\n    }\n\n  }\n}\n\n\n//Action to get Students Roster\nconst getRosterSuccess = (stuRoster) => (\n  {\n    type: GET_ROSTER_SUCCESS,\n    payload: stuRoster\n  }\n)\nconst getRosterFailure = (error) => ({\n  type: GET_ROSTER_FAILURE,\n  payload: error\n})\n\nexport const getStuRoster = (token) => {\n  return (dispatch) => {\n    dispatch({type: GET_ROSTER_REQUEST})\n    axios\n    .get(\"/api/user/instructor/courses\", {\n      headers: {\n        'x-access-token': token\n      }\n    })\n    .then((response) => {\n      let roster = response.data.data\n      // console.log(response.data)\n      dispatch(getRosterSuccess(roster))\n\n      \n    })\n    .catch((error) => {\n      dispatch(getRosterFailure(error.message))\n    })\n  }\n}\n\n///Action to get all instructors\nconst getAllInstructorsSuccess = (allInstructors) => ({\n  type: GET_ALL_INSTRUCTORS_SUCCESS,\n  payload: allInstructors\n})\n//When Request from API fails\nconst getAllInstructorsFailure = (error) => ({\n  type: GET_ALL_INSTRUCTORS_FAILURE,\n  payload: error,\n})\n\n//view instructor Api request for admin\nexport const getAllInstructors = (token) => {\n \n  return (dispatch) => {\n    console.log(\"token\",token)\n    dispatch({type: GET_ALL_INSTRUCTORS_REQUEST});\n    axios\n      .get(\"/api/user/admin/instructors\", {\n        headers: {\n          'x-access-token': token\n        }\n      })\n      .then((response) => {\n        dispatch(getAllInstructorsSuccess(response.data))\n     \n      })\n      .catch((error) => {\n        dispatch(getAllInstructorsFailure(error.message))\n      })\n  }\n}\n\n///Action to get all student\nconst getAllStudentsSuccess = (allStudents) => ({\n  type: GET_ALL_STUDENTS_SUCCESS,\n  payload: allStudents\n})\n//When Request from API fails\nconst getAllStudentsFailure = (error) => ({\n  type: GET_ALL_STUDENTS_FAILURE,\n  payload: error,\n})\n\n\n//view students Api request for admin\nexport const getAllStudents = (token) => {\n \n  return (dispatch) => {\n    dispatch({type: GET_ALL_STUDENTS_REQUEST});\n    axios\n      .get(\"/api/user/admin/students\", {\n        headers: {\n          'x-access-token': token\n        }\n      })\n      .then((response) => {\n        dispatch(getAllStudentsSuccess(response.data))\n     \n      })\n      .catch((error) => {\n        dispatch(getAllStudentsFailure(error.message))\n      })\n  }\n}\n\nconst logoutSuccess = () => ({\n  type:    LOGOUT_SUCCESS,\n  isAuthenticatedUser: false,\n});\n\nconst logoutFail = (error) => ({\n  type:    LOGOUT_FAILURE,\n  isAuthenticatedUser: false,\n  payload: error,\n});\n\n//action: LOGOUT_REQUEST\nexport const logoutAttempt = () => {\n  //dispatch logout request\n  return (dispatch) => {\n    dispatch({\n      type: LOGOUT_REQUEST\n    });\n    //call helper function to remove session from localStorage\n    destroySession();\n    //validate session to check if it was properly deleted\n    if(!validateSession()){\n      dispatch(logoutSuccess());\n    }\n    else{\n      //__session was not removed\n      dispatch(logoutFail(\"Error deleting existing session.\"))\n    }\n  }\n}\n\n//action: Add_STUDENT_FAILURE if backend call is unsuccessful\nconst addStudentFailed = (error) => ({\n  type:    ADD_STUDENT_FAILURE,\n  isFetchingAuth: false,\n  isAuthenticatedUser: false,\n  payload: error,\n});\n\n//action: ADD_STUDENT_SUCCESS once backend call is successfull\nconst addStudentSuccess = (stuObj) => ({\n  type:    ADD_STUDENT_SUCCESS,\n  isFetchingAuth: false,\n  isAuthenticatedUser: true,\n  payload: stuObj,\n});\n\n//action: ADD_STUDENT_REQUEST to REST API\nexport const addStudentAttempt = (data, accessToken) => {\n    //function receives credentials\n    return (dispatch) => {\n      //dispatch action to notify client \n      //of add student request in progress\n      dispatch({ \n          type: ADD_STUDENT_REQUEST, \n          isAddingNewUser: true, \n          isAuthenticatedUser: true \n        });\n      //use axios to query REST api for add student.\n      axios\n        .post(\"/api/auth/signup\", data, {\n          headers: {\n            \"x-access-token\": accessToken\n          }\n        })\n        .then( (response) => {\n          //if request is successful, persist a session and dispatch\n          //login success action\n          if(response.status === 200){\n            dispatch(addStudentSuccess(response.data));\n          }\n        })\n        .catch( (error) => {\n          dispatch(addStudentFailed(error.message));\n        });\n      }\n  }\n\n//action: Add_COURSE_FAILURE if backend call is unsuccessful\nconst addCourseFailed = (error) => ({\n  type:    ADD_COURSE_FAILURE,\n  isFetchingAuth: false,\n  isAuthenticatedUser: false,\n  payload: error,\n});\n\n//action: ADD_COURSE_SUCCESS once backend call is successfull\nconst addCourseSuccess = (courseObj) => ({\n  type:    ADD_COURSE_SUCCESS,\n  isFetchingAuth: false,\n  isAuthenticatedUser: true,\n  payload: courseObj,\n});\n\n//action: ADD_COURSE_REQUEST to REST API\nexport const addCourseAttempt = (data, accessToken) => {\n    //function receives credentials\n    return (dispatch) => {\n      //dispatch action to notify client \n      //of add student request in progress\n      dispatch({ \n          type: ADD_COURSE_REQUEST, \n          isAddingNewCourse: true, \n          isAuthenticatedUser: true \n        });\n      //use axios to query REST api for add course.\n      axios\n        .post(\"/api/user/instructor/courses\", data, {\n          headers: {\n            \"x-access-token\": accessToken\n          }\n        })\n        .then( (response) => {\n          //if request is successful, persist a session and dispatch\n          //login success action\n          if(response.status === 200){\n            dispatch(addCourseSuccess(response.data));\n          }\n        })\n        .catch( (error) => {\n          dispatch(addCourseFailed(error.message));\n        });\n\n        \n      }\n  }\n//action: Add_LESSON_FAILURE if backend call is unsuccessful\nconst addLessonFailed = (error) => ({\n  type: ADD_LESSON_FAILURE,\n  isFetchingAuth: false,\n  isAuthenticatedUser: false,\n  payload: error,\n});\n\n//action: ADD_LESSON_SUCCESS once backend call is successfull\nconst addLessonSuccess = (lessonObj) => ({\n  type:    ADD_LESSON_SUCCESS,\n  isFetchingAuth: false,\n  isAuthenticatedUser: true,\n  payload: lessonObj,\n});\n\n//action: ADD_COURSE_REQUEST to REST API\nexport const addLessonAttempt = (data, accessToken) => {\n    //function receives credentials\n    return (dispatch) => {\n      //dispatch action to notify client \n      //of add student request in progress\n      dispatch({ \n          type: ADD_LESSON_REQUEST, \n          isAddingNewLesson: true, \n          isAuthenticatedUser: true \n        });\n      //use axios to query REST api for add student.\n      axios\n        .post(\"/api/user/instructor/lessons\", data, {\n          headers: {\n            \"x-access-token\": accessToken\n          }\n        })\n        .then( (response) => {\n          //if request is successful, persist a session and dispatch\n          //login success action\n          if(response.status === 200){\n            dispatch(addLessonSuccess(response.data));\n          }\n        })\n        .catch( (error) => {\n          dispatch(addLessonFailed(error.message));\n        });\n      }\n  }\n  \n\n//Password reset transactions\nconst resetPassTokenSuccess = (userId) => ({\n  type:    PASSRESTOK_VALIDATION_SUCCESS,\n  isValidatingPassResTok: false,\n  isValidPassResTok: true,\n  payload: userId,\n});\n\nconst resetPassTokenFailed = (error) => ({\n  type:    PASSRESTOK_VALIDATION_FAILURE,\n  isValidatingPassResTok: false,\n  isValidPassResTok: false,\n  payload: error,\n});\n\nexport const validateResetPassToken = (tempToken) => {\n    //function receives credentials\n    return (dispatch) => {\n      dispatch({\n        type:    PASSRESTOK_VALIDATION_REQUEST,\n        isValidatingPassResTok: true,\n        isValidPassResTok: false\n      })\n      //use axios to query REST api for add student.\n      axios\n        .get(\"/api/auth/token\", {\n          headers: {\n            \"x-access-token\": tempToken\n          }\n        })\n        .then( (response) => {\n          //if request is successful, persist a session and dispatch\n          //login success action\n          if(response.status === 200){\n            dispatch(resetPassTokenSuccess(response.data.userId));\n          }\n        })\n        .catch( (error) => {\n          dispatch(resetPassTokenFailed(error.message));\n        });\n      }\n  }\n\n  const getUrlSuccess = (url) => {\n    return {\n      type: GET_URL_SUCCESS,\n      payload: url\n    }\n  }\n\n  const getUrlfailure = (error) => {\n    return {\n      type: GET_URL_FAILURE,\n      payload: error\n    }\n  }\n\n  export const getUrl = (url) => {\n    return(dispatch) => {\n      if(url){\n        dispatch(getUrlSuccess(url))\n      }else {\n        dispatch(getUrlfailure())\n      }\n    }\n  }\n\n  //action: UPDATE_STUDENT_FAILURE if backend call is unsuccessful\nconst updateStudentFailed = (error) => ({\n  type:    UPDATE_STUDENT_FAILURE,\n  isFetchingAuth: false,\n  isAuthenticatedUser: false,\n  payload: error,\n});\n\n//action: UPDATE_STUDENT_SUCCESS once backend call is successfull\nconst updateStudentSuccess = (stuObj) => ({\n  type:    UPDATE_STUDENT_SUCCESS,\n  isFetchingAuth: false,\n  isAuthenticatedUser: true,\n  payload: stuObj,\n});\n\n//action: UPDATE_STUDENT_REQUEST to REST API\nexport const updateStudentAttempt = (data, accessToken) => {\n    //function receives credentials\n    return (dispatch) => {\n      //dispatch action to notify client \n      //of add student request in progress\n      dispatch({ \n          type: UPDATE_STUDENT_REQUEST, \n          isUpdatingUser: true, \n          isAuthenticatedUser: true \n        });\n      //use axios to query REST api for add student.\n      axios\n        .post(\"/api/auth/update\", data, {\n          headers: {\n            \"x-access-token\": accessToken\n          }\n        })\n        .then( (response) => {\n          //if request is successful, persist a session and dispatch\n          //login success action\n          if(response.status === 200){\n            dispatch(updateStudentSuccess(response.data));\n          }\n        })\n        .catch( (error) => {\n          dispatch(updateStudentFailed(error.message));\n        });\n      }\n  }\n\n//Password reset transactions\nconst passwordResetSuccess = (response) => ({\n  type:    PASSWORD_RESET_SUCCESS,\n  isResetingPassword: false,\n  isPasswordResetSuccess: true,\n  payload: response\n});\n\nconst passwordResetFailure = (error) => ({\n  type:    PASSWORD_RESET_FAILURE,\n  isResetingPassword: false,\n  isPasswordResetSuccess: false,\n  payload: error,\n});\n\nexport const passwordResetAttempt = (password, userId, tempToken) => {\n    //function receives credentials\n    return (dispatch, getState) => {\n      dispatch({\n        type:    PASSWORD_RESET_REQUEST,\n        isResetingPassword: true,\n        isPasswordResetSuccess: false\n      })\n      //use axios to query REST api for add student.\n      axios\n        .post(\"/api/auth/pwdreset\", {password, userId}, {\n          headers: {\n            \"x-access-token\": tempToken\n          }\n        })\n        .then( (response) => {\n          //if request is successful, persist a session and dispatch\n          //login success action\n          if(response.status === 200){\n            dispatch(passwordResetSuccess(response.data.msg));\n          }\n        })\n        .catch( (error) => {\n          dispatch(passwordResetFailure(error.message));\n        });\n      }\n  }\n\n///Action to delete instructor\nconst deleteInstructorSuccess = (id) => ({\n  type: DELETE_INSTRUCTOR_SUCCESS,\n  payload: id\n})\n//When Request from API fails\nconst deleteInstructorFailure = (error) => ({\n  type: DELETE_INSTRUCTOR_FAILURE,\n  payload: error,\n})\n\n//delete instructor Api request for admin\nexport const deleteInstructor = (token, id) => {\n\n  return (dispatch, gState) => {\n   axios.delete('/api/user/admin/instructor/?id=' + id, {\n      headers: {\n        'x-access-token': token\n      }\n    }).then((id) => {\n      dispatch(deleteInstructorSuccess(id))\n      dispatch(getAllInstructors(token))\n    }).catch((err) => {\n      dispatch(deleteInstructorFailure(err))\n    })\n  }\n}\n\n///Action to delete student\nconst deleteStudentSuccess = (id) => ({\n  type: DELETE_STUDENT_SUCCESS,\n  payload: id\n})\n//When Request from API fails\nconst deleteStudentFailure = (error) => ({\n  type: DELETE_STUDENT_FAILURE,\n  payload: error,\n})\n\n//delete student Api request for admin\nexport const deleteStudent = (token, id) => {\n\n  return (dispatch, getState) => {\n  axios.delete(\"/api/user/admin/student/?id=\" + id, {\n    headers: {\n     'x-access-token': token\n    }\n  })\n  .then((id) => {\n    dispatch(deleteStudentSuccess(id))\n    dispatch(getAllStudents(token))\n  }).catch((err) => {\n    dispatch(deleteStudentFailure(err))\n  })\n  }\n\n}\n///Action to delete student\nconst activateUserSuccess = (id) => ({\n  type: USER_ACTIVATION_SUCCESS,\n  payload: id\n})\n//When Request from API fails\nconst activateUserFailure = (error) => ({\n  type: USER_ACTIVATION_FAILURE,\n  payload: error,\n})\n\n//view instructor Api request for admin\nexport const activateStudent = (token, id) => {\n  console.log(token)\n\n  return (dispatch, getState) => {\n  axios\n  .put(\"/api/user/admin/user/activate/?id=\" + id, id, {\n    headers: {\n     'x-access-token': token\n    }\n  })\n  .then((id) => {\n    dispatch(activateUserSuccess(id))\n    dispatch(getAllStudents(token))\n  }).catch((err) => {\n    dispatch(activateUserFailure(err))\n  })\n  }\n}\n\n//view instructor Api request for admin\nexport const activateInstructor = (token, id) => {\n  console.log(token)\n\n  return (dispatch, getState) => {\n  axios\n  .put(\"/api/user/admin/user/activate/?id=\" + id, id, {\n    headers: {\n     'x-access-token': token\n    }\n  })\n  .then((id) => {\n    dispatch(activateUserSuccess(id))\n    dispatch(getAllInstructors(token))\n  }).catch((err) => {\n    dispatch(activateUserFailure(err))\n  })\n  }\n}\n\n///Action to delete student\nconst deactivateUserSuccess = (id) => ({\n  type: USER_DEACTIVATION_SUCCESS,\n  payload: id\n})\n//When Request from API fails\nconst deactivateUserFailure = (error) => ({\n  type: USER_DEACTIVATION_FAILURE,\n  payload: error,\n})\n\n//view instructor Api request for admin\nexport const deactivateInstructor = (token, id) => {\n  console.log(token)\n\n  return (dispatch, getState) => {\n  axios\n  .put(\"/api/user/admin/user/deactivate/?id=\" + id, id, {\n    headers: {\n     'x-access-token': token\n    }\n  })\n  .then((id) => {\n    dispatch(deactivateUserSuccess(id))\n    dispatch(getAllInstructors(token))\n  }).catch((err) => {\n    dispatch(deactivateUserFailure(err))\n  })\n  }\n}\n\n//view instructor Api request for admin\nexport const deactivateStudent = (token, id) => {\n  console.log(token)\n\n  return (dispatch, getState) => {\n  axios\n  .put(\"/api/user/admin/user/deactivate/?id=\" + id, id, {\n    headers: {\n     'x-access-token': token\n    }\n  })\n  .then((id) => {\n    dispatch(deactivateUserSuccess(id))\n    dispatch(getAllStudents(token))\n  }).catch((err) => {\n    dispatch(deactivateUserFailure(err))\n  })\n  }\n}","//defining LOGIN actions\nexport const LOGIN_REQUEST = 'LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\n\n//defining LOGOUT actions\nexport const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\nexport const LOGOUT_FAILURE = 'LOGOUT_FAILURE';\n\n//defining Add Course Actions\nexport const ADD_COURSE_REQUEST = 'ADD_COURSE_REQUEST';\nexport const ADD_COURSE_SUCCESS = 'ADD_COURSE_SUCCESS';\nexport const ADD_COURSE_FAILURE = 'ADD_COURSE_FAILURE';\n\n//defining get Courses Actions\nexport const GET_COURSES_REQUEST = 'GET_COURSES_REQUEST';\nexport const GET_COURSES_SUCCESS = 'GET_COURSES_SUCCESS';\nexport const GET_COURSES_FAILURE = 'GET_COURSES_FAILURE';\n\n// defining Add Students Actions\nexport const ADD_STUDENT_REQUEST = 'ADD_STUDENT_REQUEST';\nexport const ADD_STUDENT_SUCCESS = 'ADD_STUDENT_SUCCESS';\nexport const ADD_STUDENT_FAILURE = 'ADD_STUDENT_FAILURE';\n\n//Defining Action to pass course id from courseCard to global state\nexport const SET_COURSE_ID_SUCCESS = 'SET_COURSE_ID_SUCCESS';\nexport const SET_COURSE_ID_FAILURE = 'SET_COURSE_ID_FAILURE';\nexport const SET_COURSE_ID_REQUEST = 'SET_COURSE_ID_REQUEST';\n\n// defining Add Lesson Actions\nexport const ADD_LESSON_REQUEST = 'ADD_LESSON_REQUEST';\nexport const ADD_LESSON_SUCCESS = 'ADD_LESSON_SUCCESS';\nexport const ADD_LESSON_FAILURE = 'ADD_LESSON_FAILURE';\n\n//defining get lessons Actions\nexport const GET_LESSONS_REQUEST = 'GET_LESSONS_REQUEST';\nexport const GET_LESSONS_SUCCESS = 'GET_LESSONS_SUCCESS';\nexport const GET_LESSONS_FAILURE = 'GET_LESSONS_FAILURE';\n\n//defining get  instructors Actions for admin\nexport const GET_ALL_INSTRUCTORS_REQUEST = 'GET_ALL_INSTRUCTORS_REQUEST';\nexport const GET_ALL_INSTRUCTORS_SUCCESS = 'GET_ALL_INSTRUCTORS_SUCCESS';\nexport const GET_ALL_INSTRUCTORS_FAILURE = 'GET_ALL_INSTRUCTORS_FAILURE';\n\n//defining get students Actions for admin\nexport const GET_ALL_STUDENTS_REQUEST = 'GET_ALL_STUDENTS_REQUEST';\nexport const GET_ALL_STUDENTS_SUCCESS = 'GET_ALL_STUDENTS_SUCCESS';\nexport const GET_ALL_STUDENTS_FAILURE = 'GET_ALL_STUDENTS_FAILURE';\n\n//defining roster actions\nexport const GET_ROSTER_REQUEST = 'GET_ROSTER_REQUEST';\nexport const GET_ROSTER_SUCCESS = 'GET_ROSTER_SUCCESS';\nexport const GET_ROSTER_FAILURE = 'GET_ROSTER_FAILURE';\n\n//defining reset password constants\nexport const PASSRESTOK_VALIDATION_REQUEST = 'PASSRESTOK_VALIDATION_REQUEST';\nexport const PASSRESTOK_VALIDATION_SUCCESS = 'PASSRESTOK_VALIDATION_SUCCESS';\nexport const PASSRESTOK_VALIDATION_FAILURE = 'PASSRESTOK_VALIDATION_FAILURE';\n\n//getting URL for video player\nexport const GET_URL_REQUEST = 'GET_URL_REQUEST';\nexport const GET_URL_SUCCESS = 'GET_URL_SUCCESS';\nexport const GET_URL_FAILURE = 'GET_URL_FAILURE';\n\n//defining Update Student constants\nexport const UPDATE_STUDENT_REQUEST = 'UPDATE_STUDENT_REQUEST';\nexport const UPDATE_STUDENT_SUCCESS = 'UPDATE_STUDENT_SUCCESS';\nexport const UPDATE_STUDENT_FAILURE = 'UPDATE_STUDENT_FAILURE';\n\n// password reset actions\nexport const PASSWORD_RESET_REQUEST = 'PASSWORD_RESET_REQUEST';\nexport const PASSWORD_RESET_SUCCESS = 'PASSWORD_RESET_SUCCESS';\nexport const PASSWORD_RESET_FAILURE = 'PASSWORD_RESET_FAILURE';\n\n//defining delete instructor Actions for admin\nexport const DELETE_INSTRUCTOR_SUCCESS = 'DELETE_INSTRUCTOR_SUCCESS';\nexport const DELETE_INSTRUCTOR_FAILURE = 'DELETE_INSTRUCTOR_FAILURE';\n\n//defining delete student Actions for admin\nexport const DELETE_STUDENT_SUCCESS = 'DELETE_STUDENT_SUCCESS';\nexport const DELETE_STUDENT_FAILURE = 'DELETE_STUDENT_FAILURE';\n\n//admin user activation\nexport const USER_ACTIVATION_SUCCESS = 'USER_ACTIVATION_SUCCESS';\nexport const USER_ACTIVATION_FAILURE = 'USER_ACTIVATION_FAILURE';\n\n//admin user deactivation\nexport const USER_DEACTIVATION_SUCCESS = 'USER_DEACTIVATION_SUCCESS';\nexport const USER_DEACTIVATION_FAILURE = 'USER_DEACTIVATION_FAILURE';","import React, { useState } from 'react';\nimport { Modal, Form, Button, Alert } from 'react-bootstrap';\nimport \"../App.css\";\n//import login attempt action\nimport { loginAttempt, validateResetPassToken } from \"../actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nfunction LoginModal(props) {\n  //instantiating dispacther\n  const dispatch = useDispatch();\n\n  //form validation state declaration -- initial form state of validation: false\n  const [validated, setValidated] = useState(false);\n  const [loginCreds, setLoginCreds] = useState({\n    email: \"\",\n    password: \"\"\n  });\n  //forget password state\n  const [isForgetPassword, setForgetPassword] = useState(false);\n  const [emailrec, setPassEmailRec] = useState(\"\");\n  //importing global state\n  const [isAuthenticatedUser, isFetchingAuth, error] = useSelector((gState) => [\n    gState.isAuthenticatedUser,\n    gState.isFetchingAuth,\n    gState.error,\n  ]);\n\n  //Conditional Rendering\n  //----------------------\n  const renderLoginStatus = () => {\n    if(isFetchingAuth) {return <Alert variant=\"info\">Validating...</Alert>}\n    if(isAuthenticatedUser) {return <Alert variant=\"success\">Authenticated!</Alert>}\n    if(error) {return <Alert variant=\"danger\">{error}</Alert>}\n  }\n\n  //event handlers\n  //----------------\n  const handleInputChange = (e) => {\n    //save current state\n    const currState = {...loginCreds};\n    //retrieve values form input changed\n    const {name, value} = e.target;\n    //update current State backup\n    currState[name] = value;\n    //set state\n    setLoginCreds(currState);\n  }\n\n  const handleInputChangeReset = (e) => {\n    //retrieve values form input changed\n    const {name, value} = e.target;\n    //set state\n    setPassEmailRec(value);\n  }\n\n  //handleSubmit function to send credentials\n  const handleSubmit = (e) => {\n    console.log(\"submit\")\n    e.preventDefault();\n    e.stopPropagation();\n    const form = e.currentTarget;\n    //checking validation on Submit event\n    if(form.checkValidity() !== false){\n      //dispatch loginAttempt action and pass loginCreds\n      dispatch(loginAttempt(loginCreds));\n    }\n    setValidated(true);\n  }\n\n   //handleSubmit function to send credentials\n   const handleSubmitReset = (e) => {\n    console.log(\"submit reset\")\n    e.preventDefault();\n    e.stopPropagation();\n    const form = e.currentTarget;\n    //checking validation on Submit event\n    if(form.checkValidity() !== false){\n      //dispatch loginAttempt action and pass loginCreds\n      //dispatch(loginAttempt(loginCreds));\n      console.log(\"user email\", emailrec)\n    }\n    setValidated(true);\n  }\n\n  //toggle forgetPassword\n  const toggleForgetPassword = (e) =>{\n    e.preventDefault();\n    e.stopPropagation();\n    setForgetPassword(!isForgetPassword);\n  }\n\n  //conditional rendering for FORM content\n  const renderModalForm = () => {\n    if(!isForgetPassword){\n      //return login\n      return (\n        <Form noValidate validated={validated} onSubmit={ handleSubmit } >\n          {renderLoginStatus()}\n          <Form.Group id=\"formBasicEmail\">\n              <Form.Label htmlFor=\"login-email\">Email address</Form.Label>\n              <Form.Control \n                  name=\"email\"\n                  id=\"login-email\" \n                  type=\"email\" \n                  placeholder=\"Enter email\" \n                  value={loginCreds.loginEmail}\n                  onChange={handleInputChange}\n                  required\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                Please verify email is entered correctly.\n              </Form.Control.Feedback>\n          </Form.Group>\n          <Form.Group id=\"formBasicPassword\">\n              <Form.Label htmlFor=\"login-password\">Password</Form.Label>\n              <Form.Control\n                  name=\"password\"\n                  type=\"password\"\n                  id=\"login-password\"\n                  aria-describedby=\"passwordHelpBlock\" placeholder=\"Password\"\n                  value={loginCreds.loginPassword}\n                  onChange={handleInputChange}\n                  required\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                Please enter password\n              </Form.Control.Feedback>\n          </Form.Group>\n          <Button className=\"primary-button\" type=\"submit\">Login</Button>\n          <Button className=\"homepage-buttons\" onClick={toggleForgetPassword} variant=\"secondary\">Forgot Password</Button>\n        </Form>\n      )\n    }\n    else{\n      return (\n        <Form noValidate validated={validated} onSubmit={ handleSubmitReset } >\n          {/* {renderLoginStatus()} */}\n          <Form.Group id=\"passRecover\">\n              <Form.Label htmlFor=\"email-recover\">Email address</Form.Label>\n              <Form.Control \n                  name=\"emailrec\"\n                  id=\"email-recover\" \n                  type=\"email\" \n                  placeholder=\"Enter email\" \n                  value={emailrec}\n                  onChange={handleInputChangeReset}\n                  required\n              />\n              <Form.Text className=\"text-muted\">\n                  Enter email address associated to your account to receive a password reset link.\n              </Form.Text>\n              <Form.Control.Feedback type=\"invalid\">\n                Please verify email is entered correctly.\n              </Form.Control.Feedback>\n          </Form.Group>\n          <Button className=\"primary-button\" type=\"submit\">Recover Password</Button>\n          <Button className=\"homepage-buttons\" onClick={toggleForgetPassword} variant=\"secondary\">Back to Login</Button>\n        </Form>\n\n      )\n    }\n  }\n\n    return (\n      <Modal\n        {...props} className=\"login-modal\"\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Login\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            { renderModalForm() }\n        </Modal.Body>   \n      </Modal>\n    );\n  }\n\n  export default LoginModal;","import React from 'react';\nimport { Modal, Form, Button } from 'react-bootstrap';\nimport \"../App.css\";\n\nfunction InstructorSignupModal(props) {\n    return (\n      <Modal\n        {...props} className=\"signup-modal\"\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Sign-up\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            <Form>\n                <Form.Group controlId=\"signup-first-name\">\n                    <Form.Label>First Name</Form.Label>\n                    <Form.Control controlId=\"signup-first-name\" type=\"text\" placeholder=\"First name\" />\n                </Form.Group>\n                <Form.Group controlId=\"signup-first-name\">\n                    <Form.Label>Last Name</Form.Label>\n                    <Form.Control controlId=\"signup-first-name\" type=\"text\" placeholder=\"Last name\" />\n                </Form.Group>\n                <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label>Email address</Form.Label>\n                    <Form.Control controlId=\"userID-Login\" type=\"email\" placeholder=\"Enter email\" />\n                    <Form.Text className=\"text-muted\">\n                    We'll never share your email with anyone else.\n                    </Form.Text>\n                </Form.Group>\n                <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label htmlFor=\"inputPassword5\">Password</Form.Label>\n                    <Form.Control\n                        type=\"password\"\n                        id=\"inputPassword5\"\n                        aria-describedby=\"passwordHelpBlock\" \n                        placeholder=\"Password\"\n                    />\n                    <Form.Text id=\"passwordHelpBlock\" muted>\n                        Your password must be 8-20 characters long, contain letters and numbers, and\n                        must not contain spaces, special characters, or emoji.\n                    </Form.Text>\n                </Form.Group>\n                <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label htmlFor=\"inputPassword5\">Re-enter Password</Form.Label>\n                    <Form.Control\n                        type=\"password\"\n                        id=\"inputPassword5\"\n                        aria-describedby=\"passwordHelpBlock\"\n                        placeholder=\"Password\"\n                    />\n                </Form.Group>\n                <Button className=\"primary-button\" onClick={props.onHide}>Create Account</Button>\n            </Form>\n        </Modal.Body>   \n        {/* <Modal.Footer>\n          <Button onClick={props.onHide}>Login</Button>\n        </Modal.Footer> */}\n      </Modal>\n    );\n  }\n\n  export default InstructorSignupModal;","import React from 'react';\nimport { useSelector } from \"react-redux\";\nimport { Toast } from 'react-bootstrap';\n// import { useHistory } from \"react-router-dom\";\nimport \"../App.css\";\n\nfunction WelcomeToastWidget (props) {\n    //importing global state\n    const [isAuthenticatedUser, isLoggedOutSuccess, authObj] = useSelector((gState) => [\n        gState.isAuthenticatedUser,\n        gState.isLoggedOutSuccess,\n        gState.authObj,\n    ]);\n\n    return (\n            <div\n                aria-live=\"polite\"\n                aria-atomic=\"true\"\n                style={{\n                    position: 'absolute',\n                    minHeight: '100px',\n                    minWidth: '250px',\n                    top: 0,\n                    right: 0\n                }}\n                >\n                    <Toast\n                        style={{\n                        position: 'absolute',\n                        top: 0,\n                        right: 0,\n                        backgroundColor: '#2ba6cb'\n                        }} \n                        as=\"div\"\n                    >\n                        <Toast.Body as=\"div\">\n                            <strong as=\"div\" className=\"mr-auto\">Welcome, {authObj.fname}!</strong>\n                        </Toast.Body>\n                    </Toast>\n            </div>\n    ) \n};\n\nexport default WelcomeToastWidget;","import React, {useState, useEffect} from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport LoginModal from './LoginModal';\nimport InstructorSignupModal from './InstructorSignupModal';\nimport WelcomeToastWidget from './WelcomeToastWidget';\nimport { Jumbotron, Button } from 'react-bootstrap';\nimport { useHistory } from \"react-router-dom\";\nimport { logoutAttempt } from \"../actions\";\nimport \"../App.css\";\n\nfunction Homepage(props) {\n    const dispatch = useDispatch();\n    const [loginModalShow, setLoginModalShow] = useState(false);\n    const [signupModalShow, setSignupModalShow] = useState(false);\n    //importing global state\n    const [isAuthenticatedUser, isLoggedOutSuccess, authObj] = useSelector((gState) => [\n        gState.isAuthenticatedUser,\n        gState.isLoggedOutSuccess,\n        gState.authObj,\n    ]);\n    //useHistory hook to redirect to desired routes\n    const history = useHistory();\n\n    //using useEffect to track isAuthenticatedUser changes\n    //and hide login modal after successfull signin\n    useEffect(() => {\n        if (isAuthenticatedUser){\n            setLoginModalShow(false);\n        }\n        if(!isAuthenticatedUser && isLoggedOutSuccess){\n            redirectRouter(\"/\");\n        }\n    }, [isAuthenticatedUser, isLoggedOutSuccess]);\n\n    //redirecting function\n    const redirectRouter = (routePath) => {\n        history.push(routePath);\n    }\n\n    //function to render login or logout btn\n    const renderLoginLogoutBtn = () => {\n        if (!isAuthenticatedUser){\n            return (\n                <Button className=\"homepage-buttons primary-button\" variant=\"primary\" onClick={() => \n                    setLoginModalShow(true)}>Login</Button>\n            );\n        }\n        // else {\n        //     //user authenticated. no need to show login\n        //     return (\n        //         <Button className=\"homepage-buttons primary-button\" variant=\"primary\">Welcome, {authObj.fname}</Button>\n        //     )\n        // }\n    }\n\n    //function to render instructor signup or take\n    //to dashboard button\n    const renderInstSignupOrDash = () => {\n        if (!isAuthenticatedUser) {\n            return (\n                <Button className=\"homepage-buttons\" variant=\"secondary\" onClick={() => setSignupModalShow(true)}>Become an Instructor</Button>\n            )\n        }\n        else {\n            let routePath = \"\";\n            switch (authObj.role.toUpperCase()) {\n                case \"INSTRUCTOR\":\n                    routePath = \"/instructor\";\n                    break;\n                case \"ADMIN\":\n                    routePath = \"/admin\"\n                    break\n                case \"STUDENT\":\n                    routePath = \"/student\";\n                    break;\n\n                default:\n                    routePath = \"/\";\n                    break;\n            }\n           \n            return (\n                <div as=\"div\">\n                    <Button className=\"homepage-buttons primary-button\" variant=\"primary\" onClick={() => redirectRouter(routePath)}>My Dashboard</Button>\n                    <Button className=\"homepage-buttons\" variant=\"secondary\" onClick={() => performUserLogout()}>Logout</Button>\n                    <WelcomeToastWidget />\n                </div>\n            )\n        }\n    }\n\n    const performUserLogout = () => {\n        if(isAuthenticatedUser){\n            //dispatch logout action\n            dispatch(logoutAttempt())\n        }\n    };\n\n    return (\n        < >\n            <Jumbotron className=\"homepage-background\" tag=\"div\">\n                <div className=\"homepage-content\">\n                    <h1 tag=\"div\" className=\"\">POD | E-Learning</h1>\n                    <p tag=\"div\">\n                        Revolutionizing distance learning for small format learning groups of all ages.\n                    </p>\n                    <p tag=\"div\">\n                        { renderLoginLogoutBtn() }\n                        { renderInstSignupOrDash() }\n                        <LoginModal show={loginModalShow} onHide={() => setLoginModalShow(false)} />\n                        <InstructorSignupModal show={signupModalShow} onHide={() => setSignupModalShow(false)} />\n                    </p>\n                </div>\n            </Jumbotron>\n        </>\n    )\n}\n\nexport default Homepage;","import React from \"react\";\nimport Homepage from '../Components/Homepage'\n// import { link } from \"react-router-dom\";\n\n//Home React Component -- Home Page\nfunction Home(props) {\n  return (\n    <Homepage />\n  );\n}\n\nexport default Home;\n","import React, {useEffect} from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {Navbar, NavDropdown} from \"react-bootstrap\";\nimport { logoutAttempt } from \"../actions\";\nimport \"../App.css\";\n\n\nexport default function AppNavbar() {\n    const dispatch = useDispatch();\n\n    const [isAuthenticatedUser, isLoggedOutSuccess, authObj] = useSelector((gState) => [\n        gState.isAuthenticatedUser,\n        gState.isLoggedOutSuccess,\n        gState.authObj,\n    ]);\n\n    const history = useHistory();\n    \n    useEffect(() => {\n        if(!isAuthenticatedUser && isLoggedOutSuccess){\n            redirectRouter(\"/\");\n        }\n    }, [isLoggedOutSuccess]);\n    \n    const redirectRouter = (routePath) => {\n        history.push(routePath);\n    }\n\n    const performUserLogout = () => {\n        if(isAuthenticatedUser){\n        //dispatch logout action\n            dispatch(logoutAttempt())\n        }\n    };  \n   \n    return (\n        <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\">\n            <Navbar.Brand href=\"/\">POD | E-Learning</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse className=\"justify-content-end\">\n                <Navbar.Text>Signed in as:</Navbar.Text>\n                <NavDropdown title={authObj.fname} id=\"basic-nav-dropdown\">\n                    <NavDropdown.Item href=\"/\" onClick={() => performUserLogout()}>Logout</NavDropdown.Item>\n                    {/* <NavDropdown.Item href=\"#action/3.2\">My Profile</NavDropdown.Item> */}\n                </NavDropdown>\n            </Navbar.Collapse>\n        </Navbar>\n    )\n}\n","import React, {useState} from 'react'\nimport { useSelector } from \"react-redux\";\nimport {Jumbotron, Button } from \"react-bootstrap\"\nimport AppNavbar from \"../Components/AppNavbar\";\nimport { useHistory } from \"react-router-dom\";\nimport \"../instructor.css\";\n\nexport default function InsLanding() {\n    const [stuList, setStudent] = useState();\n    const [coursesList, setCourses] = useState(false);\n\n    const [isAuthenticatedUser, authObj] = useSelector((gState) => [\n        gState.isAuthenticatedUser,\n        gState.authObj,\n    ]);\n\n    //useHistory hook to redirect to desired routes\n    const history = useHistory();\n\n    //redirecting function\n    const redirectRouter = (routePath) => {\n        history.push(routePath);\n    }\n\n    return (\n        <React.Fragment> \n            <AppNavbar />\n            {authObj.role === \"INSTRUCTOR\" ?(\n                <Jumbotron tag=\"div\" className=\"instructor-landing-hero homepage-background\">\n                <div className=\"instructor-landing-content homepage-content\">\n                    <h1 tag=\"div\" className=\"\">POD | Instructor Portal</h1>\n                    <p tag=\"div\">\n                        Manage Students, Courses, and Content all in one place!\n                    </p>\n                    <p tag=\"div\" className=\"btngroup\">\n                        <Button className=\"InsBtn AddStu primary-button\" onClick={() => redirectRouter(\"/instructor/student-roster\")}>MANAGE STUDENTS</Button>\n                        <Button className=\"InsBtn AddCourses primary-button\" onClick={() => redirectRouter(\"/instructor/courses\")}>MANAGE COURSES</Button>\n                        {/* <Button className=\"InsBtn Dashboard primary-button\" onClick={handleInstructorRoutes}>MANAGE CONTENT</Button> */}\n                    </p>\n                </div>\n            </Jumbotron>\n\n            ) :(\n                <Jumbotron tag=\"div\" className=\"student-landing-hero homepage-background\">\n                <div className=\"student-landing-content homepage-content\">\n                <h1 className=\"\">POD | Student Portal</h1>\n                <p tag=\"div\">\n                    All your Courses in one place!\n                </p>\n                <p tag=\"div\" className=\"btngroup\">\n                    <Button className=\"primary-button MyCourses\" onClick={() => redirectRouter(\"/student/courses\")}>My Courses</Button>\n                    {/* <Button className=\"InsBtn AddCourses primary-button\" onClick={redirectRouter}>MANAGE COURSES</Button> */}\n                    {/* <Button className=\"InsBtn Dashboard primary-button\" onClick={handleInstructorRoutes}>MANAGE CONTENT</Button> */}\n                </p>\n            </div>\n        </Jumbotron>\n            )}\n            \n        </React.Fragment>\n        \n    )\n}\n","import React, { useState } from 'react';\nimport { Modal, Form, Button, Alert } from 'react-bootstrap';\nimport \"../App.css\";\n//import addStudentAttempt action\nimport { addStudentAttempt } from \"../actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nfunction AddStudentModal(props) {\n  //instantiating dispacther\n  const dispatch = useDispatch();\n\n  //form validation state declaration -- initial form state of validation: false\n  const [validated, setValidated] = useState(false);\n  const [studentData, setStudentData] = useState({\n    first_name: \"\",\n    last_name: \"\",\n    email: \"\",\n    role: \"STUDENT\",\n    crsid: \"1\",\n    // password: \"\"\n  });\n\n  //importing global state\n  const [isAuthenticatedUser, authObj, error] = useSelector((gState) => [\n    gState.isAuthenticatedUser,\n    gState.authObj,\n    gState.error\n   \n  ]);\n\n  //event handlers\n  //----------------\n  const handleInputChange = (e) => {\n    //save current state\n    const currState = {...studentData};\n    //retrieve \"name\" attribute values form input changed\n    const {name, value} = e.target;\n    currState[name] = value;\n    //update current State backup\n    setStudentData(currState);\n    console.log(\"This is what we entered in form\", currState)\n  }\n\n  //handleSubmit function to send student data\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const form = e.currentTarget;\n    //checking validation on Submit event\n    if(form.checkValidity() !== false && isAuthenticatedUser){\n      //dispatch addStudentAttempt action and pass studentData\n      dispatch(addStudentAttempt(studentData, authObj.accessToken));\n      return <Alert variant=\"success\">Student Added!</Alert>\n    } \n    setValidated(true);\n  \n\n    if(error) {return <Alert variant=\"danger\">{error}</Alert>}\n      \n  }\n\n    return (\n      <Modal\n        {...props} className=\"signup-modal\"\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title className=\"contained-modal-title-vcenter\">\n            Sign-up\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            <Form noValidate validated={validated}>\n                <Form.Group className=\"signup-first-name\" >\n                    <Form.Label>First Name</Form.Label>\n                    <Form.Control id=\"signup-first-name\" type=\"text\" placeholder=\"First name\" \n                        name=\"first_name\"\n                        value={studentData.first_name}\n                        onChange={handleInputChange}\n                        required />\n                </Form.Group>\n                <Form.Group className=\"signup-last-name\">\n                    <Form.Label>Last Name</Form.Label>\n                    <Form.Control id=\"signup-last-name\" type=\"text\" placeholder=\"Last name\" \n                        name=\"last_name\"\n                        value={studentData.last_name}\n                        onChange={handleInputChange}\n                        required />\n                </Form.Group>\n                <Form.Group className=\"formBasicEmail\">\n                    <Form.Label>Email address</Form.Label>\n                    <Form.Control id=\"userID-Login\" type=\"email\" placeholder=\"Enter email\"\n                      name=\"email\"\n                      value={studentData.email}\n                      onChange={handleInputChange}\n                      required/>\n                    <Form.Text className=\"text-muted\">\n                    We'll never share your email with anyone else.\n                    </Form.Text>\n                </Form.Group>\n                <Form.Group className=\"exampleForm.ControlSelect1\">\n                  <Form.Label>Select Course</Form.Label>\n                    <Form.Control as=\"select\" \n                    name=\"crsid\"\n                    value={studentData.crsid} \n                    onChange={handleInputChange} \n                    required>\n                      <option value=\"1\">Test Course One</option>\n                      <option value=\"2\">Test Course Two</option>\n                      <option value=\"3\">Test Course Three</option>\n                    </Form.Control>\n                </Form.Group>\n                {/* <Form.Group className=\"formBasicPassword\">\n                    <Form.Label htmlFor=\"inputPassword5\">Password</Form.Label>\n                    <Form.Control\n                        type=\"password\"\n                        id=\"inputPassword5\"\n                        aria-describedby=\"passwordHelpBlock\" \n                        placeholder=\"Password\"\n                        name=\"password\"\n                        value={studentData.password} \n                        onChange={handleInputChange} \n                        required\n                    />\n                    <Form.Text className=\"passwordHelpBlock\" muted>\n                        Password must be 8-20 characters long, contain letters and numbers, and\n                        must not contain spaces, special characters, or emoji.\n                    </Form.Text>\n                </Form.Group>\n                <Form.Group className=\"formBasicPassword\">\n                    <Form.Label htmlFor=\"inputPassword5\">Re-enter Password</Form.Label>\n                    <Form.Control\n                        type=\"password\"\n                        id=\"inputPassword\"\n                        aria-describedby=\"passwordHelpBlock\"\n                        placeholder=\"Re-enter Password\"\n                        name=\"password\"\n                        value={studentData.password} \n                        onChange={handleInputChange} \n                        required\n                    />\n                    <Form.Control.Feedback type=\"invalid\">\n                      Please enter valid password\n                    </Form.Control.Feedback>\n                </Form.Group> */}\n                <Button className=\"primary-button add-student\"  onClick={ handleSubmit } >Add Student</Button>\n            </Form>\n        </Modal.Body>   \n      </Modal>\n    );\n  }\n\n  export default AddStudentModal;","import React, { useState } from 'react';\nimport { Modal, Form, Button, Alert } from 'react-bootstrap';\nimport \"../App.css\";\n//import updateStudentAttempt action\nimport { updateStudentAttempt } from \"../actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nfunction UpdateStudentModal(props) {\n  //instantiating dispacther\n  const dispatch = useDispatch();\n\n  //form validation state declaration -- initial form state of validation: false\n  const [validated, setValidated] = useState(false);\n  const [studentData, setStudentData] = useState({\n    first_name: \"\",\n    last_name: \"\",\n    email: \"\",\n    role: \"STUDENT\",\n    crsid: \"1\"\n  });\n\n  //importing global state\n  const [isAuthenticatedUser, authObj, error] = useSelector((gState) => [\n    gState.isAuthenticatedUser,\n    gState.authObj,\n    gState.error\n  ]);\n\n  //event handlers\n  //----------------\n  const handleInputChange = (e) => {\n    //save current state\n    const currState = {...studentData};\n    //retrieve \"name\" attribute values form input changed\n    const {name, value} = e.target;\n    currState[name] = value;\n    //update current State backup\n    setStudentData(currState);\n    // console.log(\"This is what we entered in form\", currState)\n  }\n\n  //handleSubmit function to send student data\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const form = e.currentTarget;\n    //checking validation on Submit event\n    if(form.checkValidity() !== false && isAuthenticatedUser){\n      //dispatch addStudentAttempt action and pass studentData\n      dispatch(updateStudentAttempt(studentData, authObj.accessToken));\n      return <Alert variant=\"success\">Student Updated!</Alert>\n    } \n    setValidated(true);\n\n    if(error) {return <Alert variant=\"danger\">{error}</Alert>}  \n  }\n\n    return (\n      <Modal\n        {...props} className=\"update-modal\"\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title className=\"contained-modal-title-vcenter\">\n            Update Student\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            <Form noValidate validated={validated}>\n                <Form.Group className=\"signup-first-name\" >\n                    <Form.Label>First Name</Form.Label>\n                    <Form.Control id=\"signup-first-name\" type=\"text\" placeholder=\"First name\" \n                        name=\"first_name\"\n                        value={studentData.first_name}\n                        onChange={handleInputChange}\n                        required />\n                </Form.Group>\n                <Form.Group className=\"signup-last-name\">\n                    <Form.Label>Last Name</Form.Label>\n                    <Form.Control id=\"signup-last-name\" type=\"text\" placeholder=\"Last name\" \n                        name=\"last_name\"\n                        value={studentData.last_name}\n                        onChange={handleInputChange}\n                        required />\n                </Form.Group>\n                <Form.Group className=\"formBasicEmail\">\n                    <Form.Label>Email address</Form.Label>\n                    <Form.Control id=\"userID-Login\" type=\"email\" placeholder=\"Enter email\"\n                      name=\"email\"\n                      value={studentData.email}\n                      onChange={handleInputChange}\n                      required/>\n                    <Form.Text className=\"text-muted\">\n                    We'll never share your email with anyone else.\n                    </Form.Text>\n                </Form.Group>\n                <Form.Group className=\"exampleForm.ControlSelect1\">\n                  <Form.Label>Select Course</Form.Label>\n                    <Form.Control as=\"select\" \n                    name=\"crsid\"\n                    value={studentData.crsid} \n                    onChange={handleInputChange} \n                    required>\n                      <option value=\"1\">Test Course One</option>\n                      <option value=\"2\">Test Course Two</option>\n                      <option value=\"3\">Test Course Three</option>\n                    </Form.Control>\n                </Form.Group>\n                {/* <Form.Group className=\"formBasicPassword\">\n                    <Form.Label htmlFor=\"inputPassword5\">Password</Form.Label>\n                    <Form.Control\n                        type=\"password\"\n                        id=\"inputPassword5\"\n                        aria-describedby=\"passwordHelpBlock\" \n                        placeholder=\"Password\"\n                        name=\"password\"\n                        value={studentData.password} \n                        onChange={handleInputChange} \n                        required\n                    />\n                    <Form.Text className=\"passwordHelpBlock\" muted>\n                        Password must be 8-20 characters long, contain letters and numbers, and\n                        must not contain spaces, special characters, or emoji.\n                    </Form.Text>\n                </Form.Group>\n                <Form.Group className=\"formBasicPassword\">\n                    <Form.Label htmlFor=\"inputPassword5\">Re-enter Password</Form.Label>\n                    <Form.Control\n                        type=\"password\"\n                        id=\"inputPassword\"\n                        aria-describedby=\"passwordHelpBlock\"\n                        placeholder=\"Re-enter Password\"\n                        name=\"password\"\n                        value={studentData.password} \n                        onChange={handleInputChange} \n                        required\n                    />\n                    <Form.Control.Feedback type=\"invalid\">\n                      Please enter valid password\n                    </Form.Control.Feedback>\n                </Form.Group> */}\n                <Button className=\"primary-button update-student\"  onClick={ handleSubmit } >Update Student</Button>\n            </Form>\n        </Modal.Body>   \n      </Modal>\n    );\n  }\n\n  export default UpdateStudentModal;","import React, {useState} from 'react';\nimport { Table, Button } from \"react-bootstrap\";\nimport UpdateStudentModal from './UpdateStudentModal';\nimport \"../instructor.css\";\n\nexport default function StudentRosterTable( props ) {\n    const { stuRoster } = props;\n    const [updateStudentModal, setUpdateStudentModal] = useState(false);\n    \n    const renderRows = () => {\n        return stuRoster.map((student, id) =>{\n            return(\n                <>\n                    {student.Users.map(user =>\n                    <tr key={id}>\n                    <td>{student.course_name}</td>\n                    <td>{user.first_name}</td>\n                    <td>{user.last_name}</td>\n                    <td>{user.email}</td>\n                    <td>\n                        <Button className=\"InsBtn AddStu primary-button\" onClick={() => {setUpdateStudentModal(true)}}>Update</Button>\n                        <Button variant=\"danger\" id=\"delButton\">Delete</Button>\n                    </td>\n                    </tr>\n                    )}\n                </>\n            )\n        })\n    }\n\n    return (\n        < >\n            <Table className=\"table-expand\">\n                <thead>\n                    <tr className=\"table-expand-row\">\n                        <th >Course Name</th>\n                        <th >First Name</th>\n                        <th >Last Name</th>\n                        <th >Email Address</th>\n                        <th ></th>\n                    </tr>\n                </thead>\n                <tbody id=\"emptyTable\">\n                {renderRows()}\n                </tbody>\n            </Table>\n            <UpdateStudentModal show={updateStudentModal} onHide={() => setUpdateStudentModal(false)} />\n        </>\n    )\n            \n}","import React, {useState, useEffect} from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport AddStudentModal from '../Components/AddStudentModal';\nimport {Jumbotron, Button } from \"react-bootstrap\"\nimport AppNavbar from \"../Components/AppNavbar\";\nimport StudentRosterTable from \"../Components/StudentRosterTable\";\nimport { getStuRoster } from \"../actions\"\nimport \"../instructor.css\";\n\nexport default function InsStudentRoster() {\n    const dispatch = useDispatch();\n    const [showStudentModal, setShowStudentModal] = useState(false);\n    //importing global state\n    const [authObj, isNewUserAdded, stuRoster] = useSelector((gState) => [\n        gState.authObj, \n        gState.isNewUserAdded,\n        gState.stuRoster,\n        //added StuRoster and error///Samir\n    ]);\n   \n    //Use effect for mounting student Roster\n    useEffect(() => {\n        dispatch(getStuRoster(authObj.accessToken));\n    },[]);\n\n    console.log(stuRoster)\n    \n    //using useEffect to track isNewUserAdded changes\n    //and show add student modal if successfully logged in\n    useEffect( () => {\n        if (isNewUserAdded){\n            setShowStudentModal(false);\n        }\n     //if NewUser changes, apply this effect  \n    }, [isNewUserAdded]);\n\n    //useHistory hook to redirect to desired routes\n    const history = useHistory();\n    //redirecting function\n    const redirectRouter = (routePath) => {\n        history.push(routePath);\n    }\n\n\n    return (\n        <React.Fragment> \n            <AppNavbar />\n            <Jumbotron className=\"ins-student-roster-hero portal-sublanding-background\">\n                <div className=\"instructor-landing-content homepage-content\">\n                    <h1 className=\"\">POD | Student Roster</h1>\n                    <p>\n                        View and manage your Student Roster globally and by course!\n                    </p>\n                    <p className=\"btngroup\">\n                        <Button className=\"InsBtn AddStu primary-button\" onClick={() => {setShowStudentModal(true)}}>ADD STUDENTS</Button>\n                        <Button className=\"InsBtn Dashboard primary-button\" onClick={() => redirectRouter(\"/instructor\")}>VIEW DASHBOARD</Button>\n                        <AddStudentModal show={showStudentModal} onHide={() => setShowStudentModal(false)} />\n                    </p>\n                </div>\n            </Jumbotron>\n            <StudentRosterTable stuRoster = { stuRoster } />\n        </React.Fragment>\n        \n        \n\n\n    )\n}","import React from 'react';\nimport {Card, Button, Image} from \"react-bootstrap\";\nimport \"../instructor.css\";\nimport $ from \"jquery\";\n\nexport default function StudentCard(props) {\n// const [user, setUser] = useState({\n//     data: data,\n\n// })\n\n//    const randomUser = function() {\n//         $.ajax({\n//             url: 'https://randomuser.me/api/',\n//             dataType: 'json',\n//             success: function(data) {\n//                 console.log(data);\n//             }\n//         });\n//    }\n\n\n    return (\n        <div>\n            <Card style={{ width: '18rem' }}>\n                <div className=\"student-card-content\">\n                    <Image className=\"student-card-image\"src=\"https://randomuser.me/api/portraits/women/89.jpg\" roundedCircle></Image>\n                    <div className=\"list-group-flush\">\n                        <div>Name: {props.firstName}{props.lastName}</div>\n                        <div>Email: {props.email}</div>\n                    </div>\n                    <Card.Body>\n                        <Button className=\"primary-button\" href=\"#\">Edit</Button>\n                        <Button className=\"homepage-button\" variant=\"danger\" href=\"#\">Delete Student</Button>\n                    </Card.Body>\n                </div>\n            </Card>\n        </div>\n    )\n}","import React, {useState} from 'react';\nimport {Jumbotron, Button } from \"react-bootstrap\";\nimport AppNavbar from \"../Components/AppNavbar\";\nimport StudentCard from \"../Components/StudentCard\";\nimport \"../instructor.css\";\n\n\nexport default function InsCourseRoster(props) {\n    const [stuList, setStudent] = useState();\n    const [coursesList, setCourses] = useState(false);\n\n\n    return (\n        < > \n            <AppNavbar />\n            <Jumbotron className=\"InsLanding-background homepage-background\">\n                <div className=\"InsLanding-content homepage-content\">\n                    <h1 className=\"\">POD | {props.courseName} Roster</h1>\n                    <p>\n                        Manage your {props.courseName} student roster\n                    </p>\n                    <p className=\"btngroup\">\n                        <Button className=\"InsBtn AddStu primary-button\">ADD STUDENTS</Button>{' '}\n                        <Button className=\"InsBtn Dashboard primary-button\">BACK TO GLOBAL ROSTER</Button>{' '}\n                    </p>\n                </div>\n            </Jumbotron>\n            <StudentCard />\n        </>\n        \n        \n\n\n    )\n}","import React from 'react';\nimport {Card, Button, CardGroup}  from \"react-bootstrap\";\nimport { useDispatch }  from \"react-redux\";\nimport { setCourseId } from \"../actions\";\nimport { Redirect, useHistory } from \"react-router-dom\";\nimport \"../App.css\";\n\n\nexport default function CourseCard(props) {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const { courses } = props;\n\n    const redirectRouter = (path) => {\n        history.push(path)\n    }\n\n   const viewLessons = (e) => {\n    let course_Id = e.currentTarget.id\n    console.log(e)\n    dispatch(setCourseId(course_Id))    \n}\n\n    return (\n        <CardGroup className=\"card-container\">\n            {courses ? (\n                    courses.map((course) => (\n                        <Card key={ course.id } className=\"course-card\">\n                                <Card.Img variant=\"top\" className=\"card-image\" />\n                                <Card.Body>\n                                <Card.Title>{ course[\"course_name\"] }</Card.Title>\n                                <Card.Text>\n                                    {course.subject}\n                                  \n                                    Some quick example text to build on the card title and make up the bulk of\n                                    the card's content.\n                                </Card.Text>\n                                <Button className=\"primary-button\" variant=\"primary\" id={ course.id } onClick={(e) => {viewLessons(e) ; redirectRouter('/instructor/courses/lessons/')} }>View Lessons</Button>\n                            </Card.Body>\n                        </Card>\n                    )     \n                    )\n                ):(<p></p>)\n            } \n        </CardGroup>\n    )\n};\n\n                    \n                    \n\n","import React, { useState } from 'react';\nimport { Modal, Form, Button, Alert } from 'react-bootstrap';\nimport \"../App.css\";\n//import addCourseAttempt action\nimport { addCourseAttempt } from \"../actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nfunction AddCourseModal(props) {\n  //instantiating dispacther\n  const dispatch = useDispatch();\n\n  //form validation state declaration -- initial form state of validation: false\n  const [validated, setValidated] = useState(false);\n  const [courseData, setCourseData] = useState({\n    course_name: \"\",\n    subject: \"\",\n    user_id: \"\"\n  });\n\n  //importing global state\n  const [isAuthenticatedUser, authObj, error] = useSelector((gState) => [\n    gState.isAuthenticatedUser,\n    gState.authObj,\n    gState.error\n   \n  ]);\n\n  //event handlers\n  //----------------\n  const handleInputChange = (e) => {\n    //save current state\n    const currState = {...courseData};\n    //retrieve \"name\" attribute values form input changed\n    const {name, value} = e.target;\n    currState[name] = value;\n    //update current State backup\n    setCourseData(currState);\n    // console.log(\"This is what we entered in form\", currState)\n  }\n\n  //handleSubmit function to send student data\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const form = e.currentTarget;\n    //checking validation on Submit event\n    if(form.checkValidity() !== false && isAuthenticatedUser){\n      // console.log(\"Is this student data?\", studentData)\n      //dispatch addCourseAttempt action and pass courseData\n      dispatch(addCourseAttempt(courseData, authObj.accessToken));\n      return <Alert variant=\"success\">Course Added!</Alert>\n    } \n    setValidated(true);\n  \n\n    if(error) {return <Alert variant=\"danger\">{error}</Alert>}\n      \n  }\n\n    return (\n      <Modal\n        {...props} className=\"course-modal\"\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title className=\"contained-modal-title-vcenter\">\n            Add Course\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            <Form noValidate validated={validated}>\n                <Form.Group className=\"course-name\" >\n                    <Form.Control id=\"signup-first-name\" type=\"text\" placeholder=\"Course Name\" \n                        name=\"course_name\"\n                        value={courseData.course_name}\n                        onChange={handleInputChange}\n                        required />\n                </Form.Group>\n                <Form.Group className=\"exampleForm.ControlSelect1\">\n                  <Form.Label>Select Course Subject</Form.Label>\n                    <Form.Control as=\"select\" \n                    name=\"subject\"\n                    value={courseData.subject} \n                    onChange={handleInputChange} \n                    required>\n                      <option value=\"Mathematics\">Mathematics</option>\n                      <option value=\"Science\">Science</option>\n                      <option value=\"Social Studies\">Social Studies</option>\n                      <option value=\"Language Arts\">Language Arts</option>\n                      <option value=\"Computer Science\">Computer Science</option>\n                    </Form.Control>\n                </Form.Group>\n                <Button className=\"primary-button add-course\" onClick={ handleSubmit } >Add Course</Button>\n            </Form>\n        </Modal.Body>   \n      </Modal>\n    );\n  }\n\n  export default AddCourseModal;","import React, { useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from \"react-router-dom\";\nimport {getCourses} from '../actions';\nimport {Jumbotron, Button} from \"react-bootstrap\";\nimport CourseCard from '../Components/CourseCard';\nimport AppNavbar from '../Components/AppNavbar';\nimport AddCourseModal from '../Components/AddCourseModal';\n\nexport default function InsCoursePage(props) {\n    const dispatch = useDispatch();\n    //importing global state\n    const [authObj, courses] = useSelector((gState) => [\n        gState.authObj, \n        gState.courses \n    ]);\n\n    const [showCourseModal, setShowCourseModal] = useState(false);\n\n    useEffect(() => {\n        dispatch(getCourses(authObj.accessToken));\n    },[authObj.accessToken]);\n\n    //useHistory hook to redirect to desired routes\n    const history = useHistory();\n    //redirecting function\n    const redirectRouter = (routePath) => {\n        history.push(routePath);\n    }\n\n\n    return (\n        <div>\n            <AppNavbar />\n            <Jumbotron className=\"ins-courses-hero portal-sublanding-background\">\n                <div className=\"instructor-landing-content homepage-content\">\n                    <h1 className=\"\">POD | Instructor Courses</h1>\n                    <p>\n                        View and manage your Courses and Lessons!\n                    </p>\n                    <p className=\"btngroup\">\n                        <Button className=\"InsBtn primary-button\" onClick={() => {setShowCourseModal(true)}}>ADD COURSE</Button>\n                        <Button className=\"InsBtn Dashboard primary-button\" onClick={() => redirectRouter(\"/instructor\")}>VIEW DASHBOARD</Button>\n                        <AddCourseModal show={showCourseModal} onHide={() => setShowCourseModal(false)} />\n                    </p>\n                </div>\n            </Jumbotron>\n            <CourseCard courses={ courses.data } />\n        </div>\n    )\n}\n\n","import React, { useState, useEffect} from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Alert, Container, Row, Col, Form, Button } from \"react-bootstrap\";\nimport { parse } from \"query-string\";\nimport { useHistory } from \"react-router-dom\";\nimport { validateResetPassToken, passwordResetAttempt } from \"../actions\";\nimport \"../instructor.css\";\n\n\n/**\n * HELPER FUNCTIONS\n */\nfunction parseToken(queryToken) {\n    \n    if(!queryToken || queryToken === \"\" || queryToken === undefined || queryToken === null){\n        //redirection to 404\n        return \"404\";\n    }\n    else if(queryToken && queryToken !== \"\"){\n        const _token = parse(queryToken).token || \"\";\n        //check if token is empty\n        if(_token !== \"\"){\n            //dispatch validation action\n            return _token;\n        }\n        else{\n            //redirect to 404\n            return \"404\";\n        }\n    }\n    else{\n        return \"404\";\n    }\n}\n\n\nexport default function ResetPassword(props) {\n    const dispatch = useDispatch();\n    //useHistory hook to redirect to desired routes\n    const history = useHistory();\n    const [isValidPassResTok, isValidatingPassResTok, isResetingPassword, isPasswordResetSuccess, resPassUid, appMsg, error] = useSelector((gState) => [\n        gState.isValidPassResTok,\n        gState.isValidatingPassResTok,\n        gState.isResetingPassword,\n        gState.isPasswordResetSuccess,\n        gState.resPassUid,\n        gState.appMsg,\n        gState.error\n    ]);\n    //form validation state declaration -- initial form state of validation: false\n    const [validated, setValidated] = useState(false);\n    const [validationError, setValidationError] = useState(\"\");\n    const [newPass, setNewPass] = useState({\n        password: \"\",\n        confirm: \"\"\n    });\n\n    useEffect(() => {\n        const _token = parseToken(props.location.search);\n        //checking for token\n        switch (_token) {\n            case \"404\":\n                console.log(\"token error\");\n                break;\n        \n            default:\n                // dispatch(validateResetPassToken(\".eyJpZCI6MywiaWF0IjoxNjAyMTI5NzEwLCJleHAiOjE2MDIyMTYxMTB9.ZM6i2yEJPR3w2fvcv6LhVQLOXOWhF9tfhNS06A4RHWE\"));\n                dispatch(validateResetPassToken(_token));\n                break;\n        }\n    }, []);\n\n    //event handlers\n    //----------------\n    const handleInputChange = (e) => {\n        //save current state\n        const currState = {...newPass};\n        //retrieve values form input changed\n        const {name, value} = e.target;\n        //update current State backup\n        currState[name] = value;\n        //set state\n        setNewPass(currState);\n    }\n    //handleSubmit function to send credentials\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        const form = e.currentTarget;\n        //checking validation on Submit event\n        if(form.checkValidity() !== false){\n            // check password criteria\n            if(newPass.password.length < 8 || newPass.password.length > 20){\n                setValidationError(\"Password does not meet length criteria.\");\n            }\n            else if(newPass.password !== newPass.confirm){\n                setValidationError(\"Passwords do not match.\");\n            }\n            else {\n                setValidationError(\"\");\n                //dispatch loginAttempt action and pass loginCreds\n                dispatch(passwordResetAttempt(newPass.password, resPassUid, parseToken(props.location.search)));\n            }\n        }\n        setValidated(true);\n    }\n\n    const msgRender = () => {\n        if (validationError !== \"\"){\n            return (\n                <Alert variant=\"danger\">{validationError}</Alert>\n            )\n        }\n        if (isResetingPassword) {\n            return (\n                <Alert variant=\"info\">Processing...</Alert>\n            )\n        }\n        else{\n            if(isPasswordResetSuccess) {\n                //call function to redirect to homepage\n                //after a couple of seconds\n                setTimeout( () => { history.push(\"/\") }, 2000);\n               return (\n                <Alert variant=\"success\">{appMsg}</Alert>\n               ) \n            }\n            else if(!isPasswordResetSuccess && error !== \"\"){\n               return (\n                <Alert variant=\"danger\">{error}</Alert>\n               )\n            }\n        }\n    }\n    \n    const returnFrag = () => {\n        //conditional rendering\n        if (isValidPassResTok){\n           return (\n                <>\n                    <h4 className=\"\">New Password Form</h4>\n                    <Form noValidate validated={validated} onSubmit={ handleSubmit }>\n                        <Form.Group controlId=\"rstPassMain\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control \n                                name=\"password\"\n                                type=\"password\" \n                                placeholder=\"Password\" \n                                value={newPass.password}\n                                onChange={handleInputChange}\n                                required\n                            />\n                            <Form.Text className=\"text-muted\">\n                                Must be 8-20 characters long.\n                            </Form.Text>\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please enter new password\n                            </Form.Control.Feedback>\n                        </Form.Group>\n\n                        <Form.Group controlId=\"rstPassConfirm\">\n                            <Form.Label>Confirm Password</Form.Label>\n                            <Form.Control \n                                type=\"password\" \n                                name=\"confirm\"\n                                placeholder=\"Confirm Password\" \n                                value={newPass.confirm}\n                                onChange={handleInputChange}\n                                required\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Passwords must match.\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        {msgRender()}\n                        <Button variant=\"primary\" type=\"submit\" disabled={isPasswordResetSuccess}>\n                            Submit\n                        </Button>\n                    </Form>\n                </>\n           ) \n        }\n        else if(!isValidPassResTok && isValidatingPassResTok){\n            return (\n                <h1 className=\"\">Validating...</h1>\n            ) \n        }\n        else if(!isValidPassResTok && !isValidatingPassResTok){\n            return (\n                <h1 className=\"\">Access Denied.</h1>\n            ) \n        }\n        else {\n            return (\n                <h1 className=\"\">Access Denied.</h1>\n            ) \n        }\n    }\n        \n    return (\n        <React.Fragment> \n            <Container>\n                <Row>\n                    <Col></Col>\n                    <Col>\n                    { returnFrag() }\n                    </Col>\n                    <Col></Col>\n                </Row>\n            </Container>\n        </React.Fragment>\n    )\n}\n","import React from 'react'\nimport { useSelector } from \"react-redux\";\nimport {Jumbotron, Button } from \"react-bootstrap\"\nimport AppNavbar from \"../Components/AppNavbar\";\nimport { useHistory } from \"react-router-dom\";\nimport \"../instructor.css\";\n\n\nfunction AdminLandingPage() {\n\n    const [isAuthenticatedUser, authObj] = useSelector((gState) => [\n        gState.isAuthenticatedUser,\n        gState.authObj,\n    ]);\n\n    //useHistory hook to redirect to desired routes\n    const history = useHistory();\n\n    //redirecting function\n    const redirectRouter = (routePath) => {\n        if(isAuthenticatedUser) {\n            switch (authObj.role.toUpperCase()) {\n                case \"ADMIN\":\n                    routePath = \"/admin/view/instructors\";\n                    break;\n                default:\n                    routePath = \"/\";\n                    break;\n            }\n        }\n        history.push(routePath);\n    }\n\n    //redirecting function\n    const redirectRouter2 = (routePath) => {\n        if(isAuthenticatedUser) {\n            switch (authObj.role.toUpperCase()) {\n                case \"ADMIN\":\n                    routePath = \"/admin/view/students\";\n                    break;\n                default:\n                    routePath = \"/\";\n                    break;\n            }\n        }\n        history.push(routePath);\n    }\n\n    return (\n\n        <React.Fragment> \n            <AppNavbar />\n            <Jumbotron className=\"InsLanding-background homepage-background\">\n            <div className=\"InsLanding-content homepage-content\">\n                <h1 className=\"\">POD | Admin Portal</h1>\n                <p>\n                    Manage Instructors and Students\n                </p>\n                <p className=\"btngroup\">\n                    <Button className=\"InsBtn AddStu primary-button\" id=\"Ins\" onClick={redirectRouter}>MANAGE INSTRUCTORS</Button>\n                    <Button className=\"InsBtn AddCourses primary-button\" id=\"Stu\" onClick={redirectRouter2}>MANAGE STUDENTS</Button>\n                </p>\n            </div>\n        </Jumbotron>\n        </React.Fragment>\n\n    )\n}\n\nexport default AdminLandingPage","import React from \"react\";\nimport { Table, Button } from \"react-bootstrap\";\n// import { useDispatch, useSelector } from 'react-redux';\nimport \"../instructor.css\";\n\nexport default function AdminInstructorTable(props) {\n  const { allInstructors } = props;\n\n  return (\n\n    <div>\n    {allInstructors ? (\n      allInstructors.map((instructor) => (\n        <Table key={instructor.id}>\n          <thead>\n            <tr>\n              <th>First Name</th>\n              <th>Last Name</th>\n              <th>Email</th>\n              <th>Activate</th>\n              <th>Deactivate</th>\n              <th>Delete</th>\n              <th>Activated</th>\n              <th>ID</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>{instructor[\"first_name\"]}</td>\n              <td>{instructor[\"last_name\"]}</td>\n              <td>{instructor[\"email\"]}</td>\n              <td>\n                <Button variant=\"success\" value={instructor.active} onClick={props.handleActivate(instructor.id)}>Activate</Button>\n              </td>\n              <td>\n                <Button variant=\"secondary\" value={instructor.active} onClick={props.handleDeactivate(instructor.id)}>Deactivate</Button>\n              </td>\n              <td>\n                <Button id={ instructor.id } onClick={props.handleDelete(instructor.id)} variant=\"danger\">Delete</Button>\n              </td>\n              <td>{instructor.active}</td>\n              <td>{instructor.id}</td>\n            </tr>\n          </tbody>\n        </Table>\n      ))\n    ) : (\n      <p></p>\n    )}\n  </div>\n  );\n}","import React, {useEffect} from 'react'\nimport {Jumbotron, Button} from \"react-bootstrap\"\nimport { useHistory } from 'react-router-dom';\nimport AppNavbar from \"../Components/AppNavbar\";\nimport InstructorTable from \"../Components/AdminInstructorTable\";\nimport \"../instructor.css\";\nimport { getAllInstructors, deleteInstructor, activateInstructor, deactivateInstructor } from '../actions'\nimport { useDispatch, useSelector } from 'react-redux';\n\nexport default function AdminInstructorList() {\n    const history = useHistory()\n\n\n    const dispatch = useDispatch()\n  \n    const [allInstructors, authObj] = useSelector((gState) => [\n      gState.allInstructors,\n      gState.authObj\n    ])\n  \n    useEffect(() => {\n        console.log(\"auth\", authObj)\n      dispatch(getAllInstructors(authObj.accessToken))\n    }, [])\n\n    const handleDelete = (id) => (e) => {\n        e.preventDefault()\n        dispatch(deleteInstructor(authObj.accessToken, id))\n    }\n\n    const handleActivate = (id) => (e) => {\n        e.preventDefault()\n        dispatch(activateInstructor(authObj.accessToken, id))\n    }\n\n    const handleDeactivate = (id) => (e) => {\n        e.preventDefault()\n        dispatch(deactivateInstructor(authObj.accessToken, id))\n    }\n    \n    \n    return (\n        <React.Fragment> \n            <AppNavbar />\n            <Jumbotron className=\"InsLanding-background\">\n                <div className=\"InsLanding-content homepage-content\">\n                    <h1 className=\"\">POD | Instructor View</h1>\n                    <p className=\"btngroup\">\n                        <Button className=\"InsBtn Dashboard primary-button\" onClick={() => {history.push(`/admin`)}}>DASHBOARD</Button>{' '}\n                    </p>\n                </div>\n            </Jumbotron>\n            <InstructorTable allInstructors={allInstructors.data} handleDelete={handleDelete} handleActivate={handleActivate} handleDeactivate={handleDeactivate} />\n        </React.Fragment>\n    )\n}","import React from \"react\";\nimport { Table, Button } from \"react-bootstrap\";\nimport { useDispatch } from 'react-redux';\nimport { useTable, useSortBy } from 'react-table';\nimport \"../instructor.css\";\n\nexport default function AdminStudentTable(props) {\n  const { allStudents } = props;\n\n  return (\n    <div>\n    {allStudents ? (\n      allStudents.map((student) => (\n        <Table key={student.id}>\n          <thead>\n            <tr>\n              <th>First Name</th>\n              <th>Last Name</th>\n              <th>Email</th>\n              <th>Activate</th>\n              <th>Deactivate</th>\n              <th>Delete</th>\n              <th>Active</th>\n              <th>ID</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>{student[\"first_name\"]}</td>\n              <td>{student[\"last_name\"]}</td>\n              <td>{student[\"email\"]}</td>\n              <td>\n                <Button variant=\"success\" value={student.active} onClick={props.handleActivate(student.id)}>Activate</Button>\n              </td>\n              <td>\n                <Button variant=\"secondary\" value={student.active} onClick={props.handleDeactivate(student.id)}>Deactivate</Button>\n              </td>\n              <td>\n                <Button id={ student.id } onClick={props.handleDelete(student.id)} variant=\"danger\">Delete</Button>\n              </td>\n              <td>{student.active}</td>\n              <td>{student.id}</td>\n            </tr>\n          </tbody>\n        </Table>\n      ))\n    ) : (\n      <p></p>\n    )}\n  </div>\n  );\n}","import React, {useEffect} from 'react'\nimport {Jumbotron, Button} from \"react-bootstrap\"\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory } from 'react-router-dom';\nimport AppNavbar from \"../Components/AppNavbar\";\nimport StudentTable from \"../Components/AdminStudentTable\";\nimport { getAllStudents, deleteStudent, activateStudent, deactivateStudent } from '../actions'\nimport \"../instructor.css\";\n\nexport default function AdminStudentList() {\n    const history = useHistory()\n\n    const dispatch = useDispatch()\n  \n    const [allStudents, authObj] = useSelector((gState) => [\n      gState.allStudents,\n      gState.authObj\n    ])\n  \n    useEffect(() => {\n      dispatch(getAllStudents(authObj.accessToken))\n    }, [])\n\n    const handleDelete = (id) => (e) => {\n        e.preventDefault()\n        dispatch(deleteStudent(authObj.accessToken, id))\n    }\n\n    const handleActivate = (id) => (e) => {\n        e.preventDefault()\n        dispatch(activateStudent(authObj.accessToken, id))\n    }\n\n    const handleDeactivate = (id) => (e) => {\n        e.preventDefault()\n        dispatch(deactivateStudent(authObj.accessToken, id))\n    }\n  \n    // console.log(allStudents)\n    console.log(allStudents.data)\n\n    return (\n        <React.Fragment> \n            <AppNavbar />\n            <Jumbotron className=\"InsLanding-background\">\n                <div className=\"InsLanding-content homepage-content\">\n                    <h1 className=\"\">POD | Student View</h1>\n                    <p className=\"btngroup\">\n                        <Button className=\"InsBtn Dashboard primary-button\" onClick={() => {history.push(`/admin`)}}>DASHBOARD</Button>{' '}\n                    </p>\n                </div>\n            </Jumbotron>\n            <StudentTable allStudents={allStudents.data} handleDelete={handleDelete} handleActivate={handleActivate} handleDeactivate={handleDeactivate} />\n        </React.Fragment>\n        \n        \n\n\n    )\n}","import React from 'react';\nimport {Card, Button, CardGroup} from \"react-bootstrap\";\nimport { useDispatch }  from \"react-redux\";\nimport { setCourseId } from \"../actions\";\nimport { Redirect, useHistory } from \"react-router-dom\";\n\nexport default function StuCourseCard(props) {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const { courses } = props;\n    \n    const redirectRouter = (path) => {\n        history.push(path)\n    }\n\n    const viewLessons = (e) => {\n        let course_Id = e.currentTarget.id;\n        dispatch(setCourseId(course_Id));      \n    }\n   \n    return (\n        <CardGroup className=\"card-container\">\n            {courses? (\n                courses.map((course) => (\n                    <Card key={ course.Users_Courses.courseId } className=\"course-card\">\n                        <Card.Img variant=\"top\" className=\"card-image\" />\n                        <Card.Body>\n                            <Card.Title>{ course[\"course_name\"] }</Card.Title>\n                            <Card.Text>\n                            {course.subject}\n                                Some quick example text to build on the card title and make up the bulk of\n                                the card's content.\n                            </Card.Text>\n                            <Button className=\"primary-button\" variant=\"primary\" id={ course.Users_Courses.courseId } onClick={ (e) => {viewLessons(e) ; redirectRouter('/student/courses/lessons')} }>View Lessons</Button>\n                        </Card.Body>\n                    </Card>\n                ))\n                ):(<p>No Courses Added</p>)   \n            }\n        </CardGroup>\n    )\n};","import React, {useEffect} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from \"react-router-dom\";\nimport {Jumbotron, Button} from \"react-bootstrap\";\nimport { getStuCourses } from '../actions';\nimport StuCourseCard from '../Components/StuCourseCard';\nimport AppNavbar from '../Components/AppNavbar';\n\n\nexport default function StuCoursePage() {\n    const dispatch = useDispatch();\n\n    const [courses, authObj] = useSelector((gState) => [\n        gState.courses,\n        gState.authObj\n      ]);\n\n    useEffect(() => {\n        dispatch(getStuCourses(authObj.accessToken));\n    },[authObj.accessToken]);\n\n     //useHistory hook to redirect to desired routes\n    const history = useHistory();\n    //redirecting function\n    const redirectRouter = (routePath) => {\n        history.push(routePath);\n    }\n\n\n\n    return (\n        <div>\n            <AppNavbar />\n            <Jumbotron className=\"student-courses-hero portal-sublanding-background\">\n                <div className=\"student-landing-content homepage-content\">\n                    <h1 className=\"\">POD | Student Courses</h1>\n                    <p>\n                        View and manage your Courses and Lessons!\n                    </p>\n                    <p className=\"btngroup\">\n                        <Button className=\"InsBtn Dashboard primary-button\" onClick={() => redirectRouter(\"/student\")}>VIEW DASHBOARD</Button>\n                    </p>\n                </div>\n            </Jumbotron>\n            <StuCourseCard courses={ courses } />\n        </div>\n    )\n}\n\n","import React from 'react';\nimport ReactPlayer from 'react-player/youtube';\nimport { useDispatch, useSelector } from 'react-redux';\nimport \"../App.css\";\n\n\nexport default function Player() {\n    const [url] = useSelector((gState) =>[\n      gState.url\n    ])\n\n    return (\n\n      <div className='player-wrapper'>\n          <ReactPlayer\n            className='react-player'\n            id='react-player'\n            url={url}\n            controls= {true}\n          />\n      </div>\n    )\n};\n","import React from 'react'\nimport Card from \"react-bootstrap/Card\"\nimport {useEffect, useState} from \"react\"\nimport Button from \"react-bootstrap/Button\"\nimport { Redirect, useHistory } from \"react-router-dom\"\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getUrl } from '../actions'\nimport Player from \"./Player\"\nimport '../App.css';\n\nexport default function LessonCard(props) {\n    const { lessons } = props\n    \n    const [authObj, url] = useSelector((gState) => [\n        gState.authObj,\n        gState.url\n      ]);   \n    const history = useHistory()\n    const dispatch = useDispatch()\n\n    \n\n\n\n   const urlGetter = (e) => {\n    // console.log(e.currentTarget.getAttribute(\"url\"))\n    let url = e.currentTarget.getAttribute(\"url\");\n    dispatch(getUrl(url));\n      \n}\n\n    const videoRouter = (path) => {\n        \n        history.push(path)\n    }\n    \n    return (\n        <div className=\"card-container\">\n            {lessons? (\n                    lessons.map((lesson) => (\n                        <Card key={ lesson.id } className=\"lesson-card\">\n                            <Card.Img variant=\"top\" className=\"card-image\" />\n                            <Card.Body>\n                                <Card.Title>{lesson.name}</Card.Title>\n                                <Card.Text>\n                                 Some quick example text to build on the card title and make up the bulk of\n                                 the card's content.\n                                </Card.Text>\n                                <div>\n                                    {authObj.role === \"STUDENT\" ? (\n                                        <Button className=\"primary-button\" variant=\"primary\" url={ lesson.url } onClick={(e) => {urlGetter(e) ; videoRouter(\"/student/courses/lessons\")} }>Watch Video</Button>\n                                    ): authObj.role === \"INSTRUCTOR\" ? (\n                                        <div>\n                                            <Button className=\"primary-button\" variant=\"primary\" url={ lesson.url } onClick={(e) => {urlGetter(e) ; videoRouter(\"/instructor/courses/lessons\")}}>Watch Video</Button>\n                                            <Button variant=\"danger\" id=\"delButton\">Delete Lesson</Button>\n                                        </div>\n                                    ):(<p></p>)}\n                                 </div>\n                                \n                            </Card.Body>\n                    </Card>\n                    )\n        \n                    )):(<p>NO LESSONS UPLOADED BY INSTRUCTOR</p>)\n                    \n            }\n\n\n\n\n        </div>\n    )\n\n}\n\n\n// import {Card, Button, CardGroup} from \"react-bootstrap\";\n// import {useEffect, useState} from \"react\";\n// import { Redirect, useHistory } from \"react-router-dom\";\n// import { useDispatch, useSelector } from 'react-redux';\n// import { getUrl } from '../actions';\n// import Player from \"./Player\";\n\n// export default function LessonCard(props) {\n//     const { lessons } = props\n    \n//     const [authObj, url] = useSelector((gState) => [\n//         gState.authObj,\n//         gState.url\n//       ]);   \n//     const history = useHistory()\n//     const dispatch = useDispatch()\n\n//     const urlGetter = (e) => {\n//         // console.log(e.currentTarget.getAttribute(\"url\"))\n//         let url = e.currentTarget.getAttribute(\"url\")\n//         dispatch(getUrl(url))\n        \n//     }\n\n//     const videoRouter = (path) => {\n//         history.push(path)\n//     }\n    \n//     return (\n//         <>\n//         <CardGroup className=\"card-container\">\n//             {lessons ? (\n//                     lessons.map((lesson) => (\n//                         <Card key={ lesson.id } className=\"lesson-card\">\n//                             <Card.Img variant=\"top\" src=\"\" />\n//                             <Card.Body>\n//                                 <Card.Title>{lesson.name}</Card.Title>\n//                                 <Card.Text>\n//                                 {lesson.description}\n//                                 </Card.Text>\n//                                 <div>\n//                                     {authObj.role === \"STUDENT\" ? (\n//                                         <Button className=\"primary-button\" variant=\"primary\" url={ lesson.url } onClick={(e) => {urlGetter(e) ; videoRouter(\"/student/courses/lessons\")} }>Watch Video</Button>\n//                                     ): authObj.role === \"INSTRUCTOR\" ? (\n//                                         <div>\n//                                             <Button className=\"primary-button\" variant=\"primary\" url={ lesson.url } onClick={(e) => {urlGetter(e) ; videoRouter(\"/instructor/courses/lessons/\" + lesson.id)} }>Watch Video</Button>{\" \"}\n//                                             <Button variant=\"danger\" id=\"delButton\">Delete Lesson</Button>\n//                                         </div>\n//                                     ):(<p></p>)}\n//                                  </div>\n                                \n//                             </Card.Body>\n//                         </Card>\n//                     )\n//                 )):(<p>NO LESSONS UPLOADED BY INSTRUCTOR</p>)    \n//             }\n//         </CardGroup>\n//         <Player />\n//         </>\n//     )\n\n// }\n","import React, {useEffect} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from \"react-router-dom\";\nimport {Jumbotron, Button } from \"react-bootstrap\";\nimport LessonCard from \"../Components/LessonCard\";\nimport AppNavbar from '../Components/AppNavbar';\nimport { getStuLessons } from '../actions';\nimport Player from \"../Components/Player\";\nimport \"../App.css\";\n\nexport default function StuLessonPage(props) {\n    const dispatch = useDispatch()\n    const [courseId, lessons, authObj, url] = useSelector((gState) => [\n        gState.courseId,\n        gState.lessons,\n        gState.authObj,\n        gState.url\n\n      ]);\n    // console.log(courseId)\n    useEffect(() => {\n        dispatch(getStuLessons(authObj.accessToken, courseId));\n    },[courseId , authObj.accessToken]);\n\n    const history = useHistory();\n    //redirecting function\n    const redirectRouter = (routePath) => {\n        history.push(routePath);\n    }\n    \n  \n    return (\n        <div>\n            <AppNavbar />\n            <Jumbotron className=\"stu-lessons-hero portal-sublanding-background\">\n                <div className=\"InsLanding-content homepage-content\">\n                    <h1 className=\"\">POD | {props.courseName}Student Lessons</h1>\n                    <p>\n                        View and manage your {props.courseName} Lessons!\n                    </p>\n                    <p className=\"btngroup\">\n                        <Button className=\"InsBtn Dashboard primary-button\" onClick={() => redirectRouter(\"/student/courses\")}>BACK TO COURSES</Button>\n                    </p>\n                </div>\n            </Jumbotron>\n            {\n                url ? (\n                    <div className=\"video-container\">\n                        <div><Player/></div>\n                        <div><br></br></div>\n                        <div><LessonCard lessons={lessons.data} /> </div>\n                    </div> \n                ) : (\n                    <div className=\"noVideo\"><LessonCard lessons={lessons.data} /></div>\n                )\n            }\n            \n        </div>\n    )\n}\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\n//Protected Route component, prevents not-logged users to \n//visit sensitive app sections\n//from react-router documentation:\nconst ProtectedRoute = ({ component: Component, path, auth, ...rest }) => {\n    return (\n        //returns a Route component from react-router\n        //which renders a component specified in the render prop\n        <Route { ...rest } render={\n            // props => <Component { ...rest } { ...props } /> \n            props => {\n                if(Object.keys(auth).length !== 0) {\n                    //user is logged in\n                    //need to verify role\n                    switch (path) {\n                        case \"/instructor\":\n                        case \"/instructor/courses\":\n                        case \"/instructor/courses/lessons\":\n                            if(auth.role.toUpperCase() === \"INSTRUCTOR\"){\n                                return <Component {...rest} {...props} />\n                            }\n                            break;\n                        case \"/instructor/student-roster\":\n                            if(auth.role.toUpperCase() === \"INSTRUCTOR\"){\n                                return <Component {...rest} {...props} />\n                            }\n                            break;\n                        case \"/instructor/courses/:id/roster\":\n                            if(auth.role.toUpperCase() === \"INSTRUCTOR\"){\n                                return <Component {...rest} {...props} />\n                            }\n                            break;\n                        case \"/admin\":\n                        case \"/admin/view/students\":\n                            if(auth.role.toUpperCase() === \"ADMIN\"){\n                                return <Component {...rest} {...props} />\n                            }\n                            break;\n                        case \"/admin/view/instructors\":\n                            if(auth.role.toUpperCase() === \"ADMIN\"){\n                                return <Component {...rest} {...props} />\n                            }\n                            break;\n                    \n                        default:\n                            break;\n                    }\n                }\n                else{\n                    //redirect to /unauthorized\n                    return <Redirect to={\n                        {\n                            pathname: \"/unauthorized\",\n                            state: {\n                                from: props.location\n                            }\n                        }\n                    }\n                    />\n                }\n            }\n        } />\n    )\n}\n\nexport default ProtectedRoute;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport logo403 from \"../img/403.png\";\nimport \"../App.css\";\n\nconst Unauthorized = () => {\n  return (\n    <div className='container'>\n      <div className=\"four0three\">\n        <img src={logo403} alt=\"403 Forbidden Access\" />\n      </div>\n      <div className=\"unauth-message\">\n        {/* <h1>403 - You Shall Not Pass</h1> */}\n        <p>Uh oh, it looks like your missing something!<br />We have not been able to verify your credentials. Please be sure you are logged in.</p>\n        <p><Link to='/'>Back to Home</Link></p>\n      </div>\n    </div>\n  )\n}\n\nexport default Unauthorized;","import React, { useState } from 'react';\nimport { Modal, Form, Button, Alert } from 'react-bootstrap';\nimport \"../App.css\";\n//import addCourseAttempt action\nimport { addLessonAttempt } from \"../actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nfunction AddLessonModal(props) {\n  //instantiating dispacther\n  const dispatch = useDispatch();\n\n  //form validation state declaration -- initial form state of validation: false\n  const [validated, setValidated] = useState(false);\n  const [lessonData, setLessonData] = useState({\n    name: \"\",\n    description: \"\",\n    url: \"\",\n    CourseId: \"\"\n  });\n\n  //importing global state\n  const [isAuthenticatedUser, authObj, error] = useSelector((gState) => [\n    gState.isAuthenticatedUser,\n    gState.authObj,\n    gState.error\n   \n  ]);\n\n  //event handlers\n  //----------------\n  const handleInputChange = (e) => {\n    //save current state\n    const currState = {...lessonData};\n    //retrieve \"name\" attribute values form input changed\n    const {name, value} = e.target;\n    currState[name] = value;\n    //update current State backup\n    setLessonData(currState);\n    console.log(\"This is what we entered in form\", currState)\n  }\n\n  //handleSubmit function to send student data\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const form = e.currentTarget;\n    //checking validation on Submit event\n    if(form.checkValidity() !== false && isAuthenticatedUser){\n      // console.log(\"Is this student data?\", studentData)\n      //dispatch addCourseAttempt action and pass courseData\n      dispatch(addLessonAttempt(lessonData, authObj.accessToken));\n      return <Alert variant=\"success\">Lesson Added!</Alert>\n    } \n    setValidated(true);\n  \n\n    if(error) {return <Alert variant=\"danger\">{error}</Alert>}\n      \n  }\n\n    return (\n      <Modal\n        {...props} className=\"lesson-modal\"\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title className=\"contained-modal-title-vcenter\">\n            Add Lesson\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            <Form noValidate validated={validated}>\n                <Form.Group className=\"lesson-name\" >\n                    <Form.Control id=\"lessonName\" type=\"text\" placeholder=\"Lesson Name\" \n                        name=\"name\"\n                        value={lessonData.name}\n                        onChange={handleInputChange}\n                        required />\n                </Form.Group>\n                <Form.Group className=\"lesson-description\">\n                    {/* <Form.Label>Enter Lesson Description</Form.Label> */}\n                    <Form.Control \n                        name=\"description\"\n                        value={lessonData.description}\n                        as=\"textarea\" \n                        rows=\"3\" \n                        placeholder=\"Enter Lesson Description\"\n                        onChange={handleInputChange}/>\n                </Form.Group>\n                <Form.Group className=\"lesson-url\" >\n                    <Form.Control id=\"lessonUrl\" type=\"text\" placeholder=\"Lesson URL\" \n                        name=\"url\"\n                        value={lessonData.url}\n                        onChange={handleInputChange}\n                        required />\n                </Form.Group>\n                <Button className=\"primary-button add-lesson\" onClick={ handleSubmit } >Add Lesson</Button>\n            </Form>\n        </Modal.Body>   \n      </Modal>\n    );\n  }\n\n  export default AddLessonModal;","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from \"react-router-dom\";\nimport AddLessonModal from \"../Components/AddLessonModal\";\nimport LessonCard from \"../Components/LessonCard\";\nimport AppNavbar from '../Components/AppNavbar';\nimport {getLessons} from '../actions';\nimport {Jumbotron, Button } from \"react-bootstrap\";\nimport Player from \"../Components/Player\";\n\n\nexport default function InsLessonPage(props) {\n    const dispatch = useDispatch()\n    //importing global state\n    const [courseId, lessons, authObj, url] = useSelector((gState) => [\n        gState.courseId,\n        gState.lessons,\n        gState.authObj,\n        gState.url\n      ]);\n\n    const [showLessonModal, setShowLessonModal] = useState(false);\n\n    useEffect(() => {\n        dispatch(getLessons(authObj.accessToken, courseId));\n    },[courseId , authObj.accessToken]);\n\n    const history = useHistory();\n    //redirecting function\n    const redirectRouter = (routePath) => {\n        history.push(routePath);\n    }\n    \n  \n    return (\n        <div>\n            <AppNavbar />\n            <Jumbotron className=\"ins-lessons-hero portal-sublanding-background\">\n                <div className=\"instructor-landing-content homepage-content\">\n                    <h1 className=\"\">POD | {props.courseName} Instructor Lessons</h1>\n                    <p>\n                        View and manage your {props.courseName} Lessons!\n                    </p>\n                    <p className=\"btngroup\">\n                        <Button className=\"InsBtn primary-button\" onClick={() => {setShowLessonModal(true)}}>ADD LESSON</Button>\n                        <Button className=\"InsBtn Dashboard primary-button\" onClick={() => redirectRouter(\"/instructor\")}>VIEW DASHBOARD</Button>\n                        <AddLessonModal show={showLessonModal} onHide={() => setShowLessonModal(false)} />\n                    </p>\n                </div>\n            </Jumbotron>\n            {\n                url ? (\n                    <div className=\"video-container\">\n                        <div><Player/></div>\n                        <div><LessonCard lessons={lessons.data} /> </div>\n                    </div> \n                ) : (\n                    <div className=\"noVideo\"><LessonCard lessons={lessons.data} /></div>\n                )\n            }\n        </div>\n    )\n}\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n//Importing pages\nimport Home from \"./pages/Home\";\nimport PortalLanding from \"./pages/PortalLanding\";\nimport InsStudentRoster from \"./pages/InsStudentRoster\";\nimport InsCourseRoster from \"./pages/InsCourseRoster\";\nimport InsCourses from \"./pages/InsCoursePage\";\nimport ResetPassword from \"./pages/ResetPassword\";\nimport AdminLandingPage from \"./pages/AdminLandingPage\"\nimport AdminInstructorView from \"./pages/AdminInstructorView\"\nimport AdminStudentView from \"./pages/AdminStudentView\"\nimport StuCoursePage from \"./pages/StuCoursePage\"\nimport StuLessonPage from \"./pages/StuLessonPage\"\n//Protected Route component\nimport ProtectedRoute from \"./Components/ProtectedRoute\";\nimport Unauthorized from \"./Components/Unauthorized\";\n//Importing CSS\nimport \"./App.css\";\nimport InsLessonPage from \"./pages/InsLessonPage\";\n\nfunction App() {\n  //importing from global state\n  const [isAuthenticatedUser, authObj] = useSelector((gState) => [\n    gState.isAuthenticatedUser,\n    gState.authObj,\n  ]);\n\n  //verify __session validity if user is authenticated\n  const isSessionValid = () => {\n    if (isAuthenticatedUser) return authObj;\n    return false;\n  }\n\n  return (\n    <div>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/student/courses\" component={StuCoursePage} />\n        <Route exact path=\"/student\" auth={isSessionValid()} component={PortalLanding} />\n        <Route exact path=\"/student/courses/lessons\" component={StuLessonPage} />\n        <ProtectedRoute exact path=\"/instructor/courses\"auth={isSessionValid()} component={InsCourses} />\n        <ProtectedRoute exact path=\"/instructor/courses/lessons\" auth={isSessionValid()} component={InsLessonPage} />\n        <ProtectedRoute exact path=\"/instructor\" auth={isSessionValid()} component={PortalLanding} />\n        <ProtectedRoute exact path=\"/instructor/student-roster\" auth={isSessionValid()} component={InsStudentRoster} />\n        <ProtectedRoute exact path=\"/instructor/courses/:id/roster\" auth={isSessionValid()} component={InsCourseRoster} />\n        <ProtectedRoute exact path=\"/admin\" auth={isSessionValid()} component={AdminLandingPage} />\n        <ProtectedRoute exact path=\"/admin/view/instructors\" auth={isSessionValid()} component={AdminInstructorView} />\n        <ProtectedRoute exact path=\"/admin/view/students\" auth={isSessionValid()} component={AdminStudentView} />\n        {/* <Route exact path=\"/instructor\" component={PortalLanding} /> */}\n        <Route exact path=\"/unauthorized\" component={Unauthorized} />\n        <Route exact path=\"/user/auth/set-password\" component={ResetPassword} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \n  LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE, \n  LOGOUT_REQUEST, LOGOUT_SUCCESS,LOGOUT_FAILURE,\n  ADD_STUDENT_REQUEST, ADD_STUDENT_SUCCESS, ADD_STUDENT_FAILURE,\n  ADD_COURSE_REQUEST, ADD_COURSE_SUCCESS, ADD_COURSE_FAILURE,\n  GET_COURSES_REQUEST, GET_COURSES_SUCCESS, GET_COURSES_FAILURE,\n  ADD_LESSON_REQUEST, ADD_LESSON_SUCCESS, ADD_LESSON_FAILURE,\n  GET_LESSONS_REQUEST, GET_LESSONS_SUCCESS, GET_LESSONS_FAILURE,\n  SET_COURSE_ID_REQUEST , SET_COURSE_ID_SUCCESS , SET_COURSE_ID_FAILURE,\n  GET_ROSTER_REQUEST, GET_ROSTER_SUCCESS, GET_ROSTER_FAILURE,\n  GET_ALL_INSTRUCTORS_REQUEST, GET_ALL_INSTRUCTORS_SUCCESS, GET_ALL_INSTRUCTORS_FAILURE,\n  PASSRESTOK_VALIDATION_REQUEST, PASSRESTOK_VALIDATION_SUCCESS, PASSRESTOK_VALIDATION_FAILURE,\n  GET_ALL_STUDENTS_REQUEST, GET_ALL_STUDENTS_SUCCESS, GET_ALL_STUDENTS_FAILURE, \n  GET_URL_REQUEST, GET_URL_SUCCESS, GET_URL_FAILURE,\n  UPDATE_STUDENT_REQUEST, UPDATE_STUDENT_SUCCESS, UPDATE_STUDENT_FAILURE,\n  PASSWORD_RESET_REQUEST, PASSWORD_RESET_SUCCESS, PASSWORD_RESET_FAILURE,\n  DELETE_INSTRUCTOR_SUCCESS, DELETE_INSTRUCTOR_FAILURE,\n  DELETE_STUDENT_SUCCESS, DELETE_STUDENT_FAILURE,\n  USER_ACTIVATION_SUCCESS, USER_ACTIVATION_FAILURE,\n  USER_DEACTIVATION_SUCCESS,USER_DEACTIVATION_FAILURE,\n} from \"./constants\";\nimport { validateSession, getSessionAuthObj } from \"./utils/sessions\";\n\nexport const initialState = {\n  isFetchingAuth: false,\n  isAuthenticatedUser: validateSession(),\n  isLoggingOut: false,\n  isLoggedOutSuccess: false,\n  isValidatingPassResTok: false,\n  isValidPassResTok: false,\n  isResetingPassword: false,\n  isPasswordResetSuccess: false,\n  authObj: getSessionAuthObj(),\n  isAddingNewCourse: false,\n  isNewCourseAdded: false,\n  courseObj: {},\n  courses: [],\n  courseId: \"\",\n  allInstructors: [],\n  allStudents: [],\n  isAddingNewLesson: false,\n  isNewLessonAdded: false,\n  lessonObj: {},\n  lessons: [],\n  lessonId: \"\",\n  isAddingNewUser: false,\n  isNewUserAdded: false,\n  stuObj: {},\n  stuRoster: [],\n  isUserUpdated: false,\n  resPassUid: {},\n  url: \"\",\n  appMsg:\"\",\n  error: \"\"\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case LOGIN_REQUEST:\n      return { \n        ...state, \n        isFetchingAuth: action.isFetchingAuth, \n        isAuthenticatedUser: action.isAuthenticatedUser \n      };\n    case LOGIN_SUCCESS:\n      return { \n        ...state, \n        isFetchingAuth: action.isFetchingAuth, \n        isAuthenticatedUser: action.isAuthenticatedUser, \n        authObj: action.payload,\n        error: \"\"\n      };\n    case LOGIN_FAILURE:\n      return { \n        ...state, \n        isFetchingAuth: action.isFetchingAuth, \n        isAuthenticatedUser: action.isAuthenticatedUser, \n        authObj: {},\n        error: action.payload\n      };\n\n    case ADD_COURSE_REQUEST:\n        return {...state, isNewCourseAdded: false} \n    case ADD_COURSE_SUCCESS:\n        return { \n          ...state, \n          isNewCourseAdded: true,\n          courseObj: action.payload,\n          error: \"\"\n        };\n    case ADD_COURSE_FAILURE:\n      return { \n        ...state, \n        isNewCourseAdded: false,\n        courseObj: {},\n        error: action.payload\n      };\n    case GET_COURSES_REQUEST:\n        return {...state, courses: [], error: null}\n    case GET_COURSES_SUCCESS:\n        return {...state, courses: action.payload, error: null}\n    case GET_COURSES_FAILURE:\n        return {...state, error: action.payload}\n\n\n    case ADD_LESSON_REQUEST:\n        return {...state, isNewLessonAdded: false} \n    case ADD_LESSON_SUCCESS:\n        return { \n          ...state, \n          isNewLessonAdded: true,\n          lessonObj: action.payload,\n          error: \"\"\n        };\n    case ADD_LESSON_FAILURE:\n        return { \n          ...state, \n          isNewLessonAdded: false,\n          lessonObj: {},\n          error: action.payload\n        };\n\n    case GET_LESSONS_REQUEST:\n          return {...state, lessons: [], error: null}\n    case GET_LESSONS_SUCCESS:\n          return {...state, lessons: action.payload, error: null}\n    case GET_LESSONS_FAILURE:\n          return {...state, error: action.payload}\n    \n\n    case SET_COURSE_ID_REQUEST:\n          return {...state, courseId: \"\", error: null}\n    case SET_COURSE_ID_SUCCESS:\n          return {...state, courseId: action.payload, error: null}\n    case SET_COURSE_ID_FAILURE:\n          return {...state, error: action.payload}\n\n    case GET_ALL_INSTRUCTORS_REQUEST:\n          return {...state, allInstructors: [], error: null}\n    case GET_ALL_INSTRUCTORS_SUCCESS:\n          return {...state, allInstructors: action.payload, error: null}\n    case GET_ALL_INSTRUCTORS_FAILURE:\n          return {...state, error: action.payload}\n\n    case GET_ALL_STUDENTS_REQUEST:\n          return {...state, allStudents: [], error: null}\n    case GET_ALL_STUDENTS_SUCCESS:\n          return {...state, allStudents: action.payload, error: null}\n    case GET_ALL_STUDENTS_FAILURE:\n          return {...state, error: action.payload}\n\n    case GET_ROSTER_REQUEST:\n            return {...state, stuRoster: [], error: null}\n    case GET_ROSTER_SUCCESS:\n            return {...state, stuRoster: action.payload, error: null}\n    case GET_ROSTER_FAILURE:\n            return {...state, error: action.payload}\n\n    case LOGOUT_REQUEST:\n      return { \n        ...state, \n        isLoggingOut: true\n      };\n    case LOGOUT_SUCCESS:\n      return { \n        ...state, \n        isLoggingOut: false,\n        isLoggedOutSuccess: true,\n        isAuthenticatedUser: false,\n        authObj: {},\n        courses: [],\n        error: \"\",\n      };\n    case LOGOUT_FAILURE:\n      //force state reset\n      return {\n        ...state, \n        isLoggingOut: false,\n        isLoggedOutSuccess: false,\n        isAuthenticatedUser: false,\n        authObj: {},\n        courses: [],\n        error: action.payload,\n      };\n\n    case ADD_STUDENT_REQUEST:\n      return {\n        ...state,\n        isNewUserAdded: false \n      }\n    case ADD_STUDENT_SUCCESS:\n      return { \n        ...state, \n        isNewUserAdded: true,\n        stuObj: action.payload,\n        error: \"\"\n      };\n    case ADD_STUDENT_FAILURE:\n      return { \n        ...state, \n        isNewUserAdded: false,\n        stuObj: {},\n        error: action.payload\n      };\n\n    //password reset\n    case PASSRESTOK_VALIDATION_REQUEST:\n      return { \n        ...state, \n        isValidatingPassResTok: action.isValidatingPassResTok, \n        isValidPassResTok: action.isValidPassResTok \n      }\n\n    //password reset\n    case PASSRESTOK_VALIDATION_SUCCESS:\n      return { \n        ...state, \n        isValidatingPassResTok: action.isValidatingPassResTok, \n        isValidPassResTok: action.isValidPassResTok, \n        resPassUid: action.payload, \n        error: \"\" \n      }\n\n    //password reset\n    case PASSRESTOK_VALIDATION_FAILURE:\n      return { \n        ...state, \n        isValidatingPassResTok: action.isValidatingPassResTok, \n        isValidPassResTok: action.isValidPassResTok, \n        error: action.payload, \n        resPassUid: \"\" \n      }\n\n      //password reset\n    case PASSWORD_RESET_REQUEST:\n      return { \n        ...state, \n        isResetingPassword: action.isResetingPassword,\n        isPasswordResetSuccess: action.isPasswordResetSuccess,\n        appMsg: \"\",\n        error: \"\"\n      }\n\n    //password reset\n    case PASSWORD_RESET_SUCCESS:\n      return { \n        ...state, \n        isResetingPassword: action.isResetingPassword,\n        isPasswordResetSuccess: action.isPasswordResetSuccess,\n        appMsg: action.payload,\n        error: \"\" \n      }\n\n    //password reset\n    case PASSWORD_RESET_FAILURE:\n      return { \n        ...state, \n        isResetingPassword: action.isResetingPassword,\n        isPasswordResetSuccess: action.isPasswordResetSuccess,\n        error: action.payload, \n        appMsg: \"\",\n        resPassUid: \"\" \n      }\n\n    case GET_URL_REQUEST:\n       return {...state, url: '', error:null}\n    case GET_URL_SUCCESS:\n       return {...state, url: action.payload, error:null}\n    case GET_URL_FAILURE:\n       return {...state, error: action.payload} \n    \n    case UPDATE_STUDENT_REQUEST:\n      return {\n        ...state,\n        isUserUpdated: false\n      }; \n    case UPDATE_STUDENT_SUCCESS:\n      return { \n        ...state, \n        isUserUpdated: true,\n        stuObj: action.payload,\n        error: \"\"\n      };\n    case UPDATE_STUDENT_FAILURE:\n      return { \n        ...state, \n        isUserUpdated: false,\n        stuObj: {},\n        error: action.payload\n      };\n\n    case DELETE_INSTRUCTOR_SUCCESS:\n      return state\n    case DELETE_INSTRUCTOR_FAILURE:\n      return { ...state, error: action.payload }\n\n    case DELETE_STUDENT_SUCCESS:\n        return state\n    case DELETE_STUDENT_FAILURE:\n        return { ...state, error: action.payload }\n\n    case USER_ACTIVATION_SUCCESS:\n      return state\n    case USER_ACTIVATION_FAILURE:\n      return {...state, error: action.payload}\n\n    case USER_DEACTIVATION_SUCCESS:\n      return state\n    case USER_DEACTIVATION_FAILURE:\n      return {...state, error: action.payload}\n    \n    default:\n      return state;\n  };\n  \n};","import { createStore, applyMiddleware, compose } from 'redux';\nimport reducer, { initialState } from './reducer';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(\n  reducer,\n  initialState,\n  compose(applyMiddleware(thunk), composeWithDevTools())\n);\n\nexport default store","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {Provider} from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>,\n  \n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/403.582b9608.png\";"],"sourceRoot":""}